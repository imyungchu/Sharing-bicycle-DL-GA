{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32985,"status":"ok","timestamp":1653566295845,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"},"user_tz":-480},"id":"3eptBgSZCOgt","outputId":"fcc94a42-09ec-4d46-880a-dea4de5b93fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"KE0QZiA7CW-j","executionInfo":{"status":"ok","timestamp":1653566298924,"user_tz":-480,"elapsed":3085,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"}}},"outputs":[],"source":["from glob import glob\n","from datetime import datetime\n","from scipy.stats import ttest_ind\n","from sklearn.preprocessing import MaxAbsScaler\n","\n","import random\n","import calendar\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","\n","import pandas as pd\n","import numpy as np\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten, LSTM, TimeDistributed, RepeatVector,GRU\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":354},"executionInfo":{"elapsed":6610,"status":"ok","timestamp":1653566305529,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"},"user_tz":-480},"id":"R7idxtqfCaCt","outputId":"44f763ec-56d7-46ce-fd73-add0be966ca8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            started_at                   Start station  \\\n","0  2018-01-01 00:14:30   15th St & Constitution Ave NW   \n","1  2018-01-01 00:14:53   15th St & Constitution Ave NW   \n","2  2018-01-01 00:23:41           Maine Ave & 9th St SW   \n","3  2018-01-01 00:37:44  California St & Florida Ave NW   \n","4  2018-01-01 00:39:24        18th St & Wyoming Ave NW   \n","\n","                     End station               end_at  is_weekend Member type  \\\n","0  15th St & Constitution Ave NW  2018-01-01 00:35:53           0      casual   \n","1  15th St & Constitution Ave NW  2018-01-01 00:35:58           0      casual   \n","2                  4th & M St SW  2018-01-01 00:28:35           0      member   \n","3     14th & Rhode Island Ave NW  2018-01-01 00:44:31           0      member   \n","4                 15th & P St NW  2018-01-01 00:48:54           0      member   \n","\n","  weekday         period  year  month  hour  \n","0  monday  Early morning  2018      1     0  \n","1  monday  Early morning  2018      1     0  \n","2  monday  Early morning  2018      1     0  \n","3  monday  Early morning  2018      1     0  \n","4  monday  Early morning  2018      1     0  "],"text/html":["\n","  <div id=\"df-be755e7f-0f1d-4fb9-86c9-193376beab09\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>started_at</th>\n","      <th>Start station</th>\n","      <th>End station</th>\n","      <th>end_at</th>\n","      <th>is_weekend</th>\n","      <th>Member type</th>\n","      <th>weekday</th>\n","      <th>period</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01 00:14:30</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>2018-01-01 00:35:53</td>\n","      <td>0</td>\n","      <td>casual</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01 00:14:53</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>2018-01-01 00:35:58</td>\n","      <td>0</td>\n","      <td>casual</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01 00:23:41</td>\n","      <td>Maine Ave &amp; 9th St SW</td>\n","      <td>4th &amp; M St SW</td>\n","      <td>2018-01-01 00:28:35</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01 00:37:44</td>\n","      <td>California St &amp; Florida Ave NW</td>\n","      <td>14th &amp; Rhode Island Ave NW</td>\n","      <td>2018-01-01 00:44:31</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01 00:39:24</td>\n","      <td>18th St &amp; Wyoming Ave NW</td>\n","      <td>15th &amp; P St NW</td>\n","      <td>2018-01-01 00:48:54</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be755e7f-0f1d-4fb9-86c9-193376beab09')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-be755e7f-0f1d-4fb9-86c9-193376beab09 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-be755e7f-0f1d-4fb9-86c9-193376beab09');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}],"source":["# ÈÄ≤Á´ôÊµÅÈáèÂâç20ÂêçÁöÑÁ´ôÈªûË≥áÊñô\n","start_st = pd.read_csv('/content/drive/MyDrive/Â∞àÈ°åÁ†îÁ©∂üí™/sharingbike/ReturnTop20.csv')\n","start_st.head() "]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1653566305532,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"},"user_tz":-480},"id":"2VvDQ0Kub3Nm","outputId":"3efdbbe0-633f-457c-acf0-cc64b0586403"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                      hour\n","End station                                               \n","Columbus Circle / Union Station                     171739\n","Lincoln Memorial                                    139388\n","15th & P St NW                                      130303\n","Jefferson Dr & 14th St SW                           126061\n","4th St & Madison Dr NW                              122195\n","Henry Bacon Dr & Lincoln Memorial Circle NW         117182\n","Massachusetts Ave & Dupont Circle NW                115847\n","1st & M St NE                                       112761\n","Smithsonian-National Mall / Jefferson Dr & 12th...  111238\n","New Hampshire Ave & T St NW                         109102\n","14th & V St NW                                      102164\n","Jefferson Memorial                                   92360\n","15th St & Constitution Ave NW                        85189\n","14th & Rhode Island Ave NW                           84814\n","5th & K St NW                                        84197\n","4th & M St SW                                        83761\n","8th & O St NW                                        83386\n","Thomas Circle                                        81600\n","11th & M St NW                                       76358\n","14th & Irving St NW                                  60939"],"text/html":["\n","  <div id=\"df-b31f9b34-f74f-41d8-b8b9-b37fac56ec6a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hour</th>\n","    </tr>\n","    <tr>\n","      <th>End station</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Columbus Circle / Union Station</th>\n","      <td>171739</td>\n","    </tr>\n","    <tr>\n","      <th>Lincoln Memorial</th>\n","      <td>139388</td>\n","    </tr>\n","    <tr>\n","      <th>15th &amp; P St NW</th>\n","      <td>130303</td>\n","    </tr>\n","    <tr>\n","      <th>Jefferson Dr &amp; 14th St SW</th>\n","      <td>126061</td>\n","    </tr>\n","    <tr>\n","      <th>4th St &amp; Madison Dr NW</th>\n","      <td>122195</td>\n","    </tr>\n","    <tr>\n","      <th>Henry Bacon Dr &amp; Lincoln Memorial Circle NW</th>\n","      <td>117182</td>\n","    </tr>\n","    <tr>\n","      <th>Massachusetts Ave &amp; Dupont Circle NW</th>\n","      <td>115847</td>\n","    </tr>\n","    <tr>\n","      <th>1st &amp; M St NE</th>\n","      <td>112761</td>\n","    </tr>\n","    <tr>\n","      <th>Smithsonian-National Mall / Jefferson Dr &amp; 12th St SW</th>\n","      <td>111238</td>\n","    </tr>\n","    <tr>\n","      <th>New Hampshire Ave &amp; T St NW</th>\n","      <td>109102</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; V St NW</th>\n","      <td>102164</td>\n","    </tr>\n","    <tr>\n","      <th>Jefferson Memorial</th>\n","      <td>92360</td>\n","    </tr>\n","    <tr>\n","      <th>15th St &amp; Constitution Ave NW</th>\n","      <td>85189</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; Rhode Island Ave NW</th>\n","      <td>84814</td>\n","    </tr>\n","    <tr>\n","      <th>5th &amp; K St NW</th>\n","      <td>84197</td>\n","    </tr>\n","    <tr>\n","      <th>4th &amp; M St SW</th>\n","      <td>83761</td>\n","    </tr>\n","    <tr>\n","      <th>8th &amp; O St NW</th>\n","      <td>83386</td>\n","    </tr>\n","    <tr>\n","      <th>Thomas Circle</th>\n","      <td>81600</td>\n","    </tr>\n","    <tr>\n","      <th>11th &amp; M St NW</th>\n","      <td>76358</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; Irving St NW</th>\n","      <td>60939</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b31f9b34-f74f-41d8-b8b9-b37fac56ec6a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b31f9b34-f74f-41d8-b8b9-b37fac56ec6a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b31f9b34-f74f-41d8-b8b9-b37fac56ec6a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}],"source":["# ÊØèÁ´ôÂÄüËªäÈáè(ÊúÄÂ§ßÂà∞ÊúÄÂ∞è)\n","station_count =pd.DataFrame(start_st.groupby(['End station'])['hour'].count())\n","station_count.sort_values(by=['hour'], inplace=True, ascending=False)\n","station_rank = list(station_count.index)\n","station_count"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":1139,"status":"ok","timestamp":1653566306660,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"},"user_tz":-480},"id":"wHK0hT7OFdwS","outputId":"e1967049-85ce-453c-cd2e-f9c9f3e10cc8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  End station    groupby_col  to_cnt\n","groupby_col                                         \n","2018-01-01 01  11th & M St NW  2018-01-01 01       2\n","2018-01-01 02  11th & M St NW  2018-01-01 02       4\n","2018-01-01 10  11th & M St NW  2018-01-01 10       1\n","2018-01-01 11  11th & M St NW  2018-01-01 11       1\n","2018-01-01 12  11th & M St NW  2018-01-01 12       2\n","...                       ...            ...     ...\n","2021-12-31 17   Thomas Circle  2021-12-31 17       2\n","2021-12-31 19   Thomas Circle  2021-12-31 19       2\n","2021-12-31 20   Thomas Circle  2021-12-31 20       1\n","2021-12-31 21   Thomas Circle  2021-12-31 21       1\n","2022-01-01 00   Thomas Circle  2022-01-01 00       1\n","\n","[433872 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-67be4cc3-4ee4-4e31-8983-eed1eab9f808\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>End station</th>\n","      <th>groupby_col</th>\n","      <th>to_cnt</th>\n","    </tr>\n","    <tr>\n","      <th>groupby_col</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01 01</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 01</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 02</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 02</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 10</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 11</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 11</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 12</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 12</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 17</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 17</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 19</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 19</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 20</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 20</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 21</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 21</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-01 00</th>\n","      <td>Thomas Circle</td>\n","      <td>2022-01-01 00</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>433872 rows √ó 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67be4cc3-4ee4-4e31-8983-eed1eab9f808')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-67be4cc3-4ee4-4e31-8983-eed1eab9f808 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-67be4cc3-4ee4-4e31-8983-eed1eab9f808');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["#Êääend time Ë®≠ÁÇ∫ index\n","start_st.set_index('end_at', inplace = True)\n","\n","#Ê†πÊìöÊôÇÈñì(Â∞èÊôÇÁÇ∫ÂñÆ‰Ωç)‰æÜÂàÜÁæ§\n","start_st['groupby_col'] = start_st.index.map(lambda x:str(x)[:13])\n","# Ë®àÁÆóÂêÑÁ´ôÈªûÊØèÂ∞èÊôÇÂÄüËªäÈáè\n","start_st_model =pd.DataFrame(start_st.groupby(['End station', 'groupby_col'])['hour'].count())\n","\n","# Rename the 'hour' to 'from_cnt'\n","# Make the 'grouby_col' the index\n","start_st_model.rename(columns={'hour':'to_cnt'}, inplace=True)\n","start_st_model.reset_index(inplace=True)\n","start_st_model.index = start_st_model['groupby_col']\n","\n","start_st_model\n","# ÁèæÂú®Ë≥áÊñôÁÇ∫Ë©≤ÊôÇÊÆµ Âì™‰∏ÄÁ´ôÈªû Ë¶ÅÂÄüÂπæÂè∞Ëªä(ÊòØÈúÄË¶ÅÈ†êÊ∏¨ÊôÇÁöÑË≥áÊñôËº∏ÂÖ•ÂûãÊÖã)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"0J9duJQDeN4I","executionInfo":{"status":"ok","timestamp":1653566306661,"user_tz":-480,"elapsed":8,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"}}},"outputs":[],"source":["# functions def\n","\n","# ÁØ©Á´ôÈªûË≥áÊñô\n","def produce_picked_station_data(all_station_data, station_name):\n","  fliter = (all_station_data['End station'] == station_name)\n","  picked_station_data = all_station_data[fliter]\n","  return picked_station_data \n","\n","\n","def feature_extractor0(data, time_data):\n","  data['groupby_col'] = pd.to_datetime(data['groupby_col'])\n","  data.drop('End station', axis=1, inplace=True)\n","  data = data.rename(columns={\"groupby_col\":\"Time\"})\n","  #Â∞áÁõ∏ÂêåÊôÇÈñìÈñìÈöîÁöÑÊôÇÈñìË°®ËàáÈÄ≤Á´ôÈõ¢Á´ôË≥áË®äÂÅöÁµêÂêà\n","  data['Time'] = pd.to_datetime(data['Time'])\n","  data = pd.merge(time_data, data,on=['Time'],how='left')\n","  # NaNË£ú0\n","  data = data.fillna(0)\n","  # Â∞áTimeË®≠ÁÇ∫index\n","  data.index = data['Time']\n","  data['year'] = data.index.map(lambda x:str(x)[:4])  \n","  data['month'] = data.index.map(lambda x:str(x)[5:7])\n","  data['hour'] = data.index.map(lambda x:str(x)[11:13])\n","  data['day'] = data.index.day_name()\n","  data.drop('Time', axis=1, inplace=True)\n","  # print('data info')\n","  # print(data.info())\n","  # print('from_cnt data describe')\n","  # print(data['from_cnt'].describe())\n","  data.reset_index(inplace=True)\n","  data = data.drop(['Time', 'year'],axis=1)\n","  ## 'Start station', 'year', 'month', 'day', 'hour' columns to be converted to dummies\n","  data = pd.get_dummies(data=data, columns=['month', 'day', 'hour'])  \n","  # print('data check')\n","  # print(data)\n","  return data\n","\n","\n","def feature_extractor1(data, time_data):\n","\n","\n","  return data\n","\n","\n","def feature_engineering(data, time_data, index=0):\n","  if index == 0:\n","    featured_data = feature_extractor0(data, time_data)\n","  else:\n","    featured_data = feature_extractor1(data, time_data)\n","  return featured_data\n","\n","\n","def scaling(data, column_name='to_cnt'):\n","  ##ÈÄ≤Ë°åË≥áÊñôÊ®ôÊ∫ñÂåñ\n","  scaler = MaxAbsScaler()\n","  data[column_name] = scaler.fit_transform(data[column_name].values.reshape(-1,1))\n","  return data\n","\n","\n","def build_training_data(full_data, used_days):\n","  x_train = []   #È†êÊ∏¨ÈªûÁöÑÂâç 7 Â§©ÁöÑË≥áÊñô\n","  y_train = []   #È†êÊ∏¨Èªû\n","  Pasthours = 24 * used_days\n","  Futurehours = 1\n","  for i in range(full_data.shape[0]-Pasthours-Futurehours):  \n","    x_train.append(np.array(full_data.iloc[i:i+Pasthours]))\n","    y_train.append(np.array(full_data.iloc[i+Pasthours:i+Pasthours+Futurehours][\"to_cnt\"]))\n","  x_train, y_train = np.array(x_train), np.array(y_train)  # ËΩâÊàênumpy arrayÁöÑÊ†ºÂºèÔºå‰ª•Âà©Ëº∏ÂÖ•LSTM\n","  return x_train, y_train\n","\n","\n","def build_training_and_validation_data(x_train, y_train, rate):\n","  X_train = x_train[int(x_train.shape[0]*rate):]\n","  Y_train = y_train[int(y_train.shape[0]*rate):]\n","  X_val = x_train[:int(x_train.shape[0]*rate)]\n","  Y_val = y_train[:int(y_train.shape[0]*rate)]\n","  return X_train, Y_train, X_val, Y_val\n","\n","\n","# Êâì‰∫ÇË≥áÊñô\n","def shuffle(X,Y):\n","  np.random.seed(10)\n","  randomList = np.arange(X.shape[0])\n","  np.random.shuffle(randomList)\n","  return X[randomList], Y[randomList]\n","\n","\n","def buildManyToOneModel(shape):\n","  model = Sequential()\n","  model.add(LSTM(20, input_shape=(shape[1],shape[2]),return_sequences=True))\n","  model.add(LSTM(10, input_shape=(shape[1],shape[2]),return_sequences=False))\n","  model.add(Dropout(0.05))\n","  model.add(Dense(10))\n","  model.add(Dense(1))\n","  model.compile(loss=\"mse\", optimizer=\"Adam\", metrics=['accuracy', 'mse'])\n","  model.summary()\n","  return model"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s5PLSMxbbax-","outputId":"32a76531-1486-4257-e288-0e1911a2d475","executionInfo":{"status":"ok","timestamp":1653569000091,"user_tz":-480,"elapsed":2693437,"user":{"displayName":"Ë¨ùÊÉ†Âñª","userId":"15143125498505042505"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["index =  0\n","model building for  Columbus Circle / Union Station  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm (LSTM)                 (None, 168, 20)           5200      \n","                                                                 \n"," lstm_1 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout (Dropout)           (None, 10)                0         \n","                                                                 \n"," dense (Dense)               (None, 10)                110       \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 13s 20ms/step - loss: 0.0130 - accuracy: 0.3341 - mse: 0.0130 - val_loss: 0.0088 - val_accuracy: 0.3383 - val_mse: 0.0088\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0081 - accuracy: 0.3341 - mse: 0.0081 - val_loss: 0.0063 - val_accuracy: 0.3383 - val_mse: 0.0063\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0052 - accuracy: 0.3341 - mse: 0.0052 - val_loss: 0.0035 - val_accuracy: 0.3383 - val_mse: 0.0035\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.3341 - mse: 0.0037 - val_loss: 0.0030 - val_accuracy: 0.3383 - val_mse: 0.0030\n","Epoch 5/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0033 - accuracy: 0.3341 - mse: 0.0033 - val_loss: 0.0028 - val_accuracy: 0.3383 - val_mse: 0.0028\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0032 - accuracy: 0.3341 - mse: 0.0032 - val_loss: 0.0028 - val_accuracy: 0.3383 - val_mse: 0.0028\n","Epoch 7/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.3341 - mse: 0.0030 - val_loss: 0.0026 - val_accuracy: 0.3383 - val_mse: 0.0026\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0029 - accuracy: 0.3341 - mse: 0.0029 - val_loss: 0.0025 - val_accuracy: 0.3383 - val_mse: 0.0025\n","Epoch 9/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0028 - accuracy: 0.3341 - mse: 0.0028 - val_loss: 0.0026 - val_accuracy: 0.3383 - val_mse: 0.0026\n","Epoch 10/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0028 - accuracy: 0.3341 - mse: 0.0028 - val_loss: 0.0025 - val_accuracy: 0.3383 - val_mse: 0.0025\n","Epoch 11/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0027 - accuracy: 0.3341 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.3383 - val_mse: 0.0025\n","Epoch 12/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0026 - accuracy: 0.3341 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.3383 - val_mse: 0.0025\n","Epoch 13/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0026 - accuracy: 0.3341 - mse: 0.0026 - val_loss: 0.0024 - val_accuracy: 0.3383 - val_mse: 0.0024\n","Epoch 14/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0026 - accuracy: 0.3341 - mse: 0.0026 - val_loss: 0.0023 - val_accuracy: 0.3383 - val_mse: 0.0023\n","Epoch 15/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.3341 - mse: 0.0025 - val_loss: 0.0024 - val_accuracy: 0.3383 - val_mse: 0.0024\n","Epoch 16/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.3341 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.3383 - val_mse: 0.0023\n","Epoch 17/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.3341 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.3383 - val_mse: 0.0023\n","Epoch 18/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0024 - accuracy: 0.3341 - mse: 0.0024 - val_loss: 0.0024 - val_accuracy: 0.3383 - val_mse: 0.0024\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.3341 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.3383 - val_mse: 0.0023\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.3341 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.3383 - val_mse: 0.0023\n","model building for  Columbus Circle / Union Station  done\n","index =  1\n","model building for  Lincoln Memorial  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_2 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_3 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0052 - accuracy: 0.4514 - mse: 0.0052 - val_loss: 0.0035 - val_accuracy: 0.4455 - val_mse: 0.0035\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0034 - accuracy: 0.4514 - mse: 0.0034 - val_loss: 0.0029 - val_accuracy: 0.4455 - val_mse: 0.0029\n","Epoch 3/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.4514 - mse: 0.0030 - val_loss: 0.0026 - val_accuracy: 0.4455 - val_mse: 0.0026\n","Epoch 4/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0028 - accuracy: 0.4514 - mse: 0.0028 - val_loss: 0.0025 - val_accuracy: 0.4455 - val_mse: 0.0025\n","Epoch 5/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0027 - accuracy: 0.4514 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.4455 - val_mse: 0.0026\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0027 - accuracy: 0.4514 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.4455 - val_mse: 0.0025\n","Epoch 7/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0026 - accuracy: 0.4514 - mse: 0.0026 - val_loss: 0.0024 - val_accuracy: 0.4455 - val_mse: 0.0024\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4455 - val_mse: 0.0025\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0024 - val_accuracy: 0.4455 - val_mse: 0.0024\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0024 - val_accuracy: 0.4455 - val_mse: 0.0024\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 13/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0024 - val_accuracy: 0.4455 - val_mse: 0.0024\n","Epoch 16/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.4514 - mse: 0.0025 - val_loss: 0.0024 - val_accuracy: 0.4455 - val_mse: 0.0024\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 19/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0024 - accuracy: 0.4514 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4455 - val_mse: 0.0023\n","model building for  Lincoln Memorial  done\n","index =  2\n","model building for  15th & P St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_4 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_5 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_2 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_4 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_5 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 20ms/step - loss: 0.0118 - accuracy: 0.2784 - mse: 0.0118 - val_loss: 0.0087 - val_accuracy: 0.2775 - val_mse: 0.0087\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0081 - accuracy: 0.2784 - mse: 0.0081 - val_loss: 0.0072 - val_accuracy: 0.2775 - val_mse: 0.0072\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0072 - accuracy: 0.2784 - mse: 0.0072 - val_loss: 0.0070 - val_accuracy: 0.2775 - val_mse: 0.0070\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0069 - accuracy: 0.2784 - mse: 0.0069 - val_loss: 0.0065 - val_accuracy: 0.2775 - val_mse: 0.0065\n","Epoch 5/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0067 - accuracy: 0.2784 - mse: 0.0067 - val_loss: 0.0063 - val_accuracy: 0.2775 - val_mse: 0.0063\n","Epoch 6/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0065 - accuracy: 0.2784 - mse: 0.0065 - val_loss: 0.0062 - val_accuracy: 0.2775 - val_mse: 0.0062\n","Epoch 7/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0063 - accuracy: 0.2784 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.2775 - val_mse: 0.0060\n","Epoch 8/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0063 - accuracy: 0.2784 - mse: 0.0063 - val_loss: 0.0061 - val_accuracy: 0.2775 - val_mse: 0.0061\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0062 - accuracy: 0.2784 - mse: 0.0062 - val_loss: 0.0059 - val_accuracy: 0.2775 - val_mse: 0.0059\n","Epoch 10/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0062 - accuracy: 0.2784 - mse: 0.0062 - val_loss: 0.0061 - val_accuracy: 0.2775 - val_mse: 0.0061\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.2784 - mse: 0.0061 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 12/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0061 - accuracy: 0.2785 - mse: 0.0061 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 13/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0060 - accuracy: 0.2784 - mse: 0.0060 - val_loss: 0.0059 - val_accuracy: 0.2775 - val_mse: 0.0059\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.2784 - mse: 0.0061 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 15/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0060 - accuracy: 0.2784 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.2785 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 17/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0060 - accuracy: 0.2784 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 18/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0060 - accuracy: 0.2785 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 19/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0059 - accuracy: 0.2785 - mse: 0.0059 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","Epoch 20/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0059 - accuracy: 0.2784 - mse: 0.0059 - val_loss: 0.0058 - val_accuracy: 0.2775 - val_mse: 0.0058\n","model building for  15th & P St NW  done\n","index =  3\n","model building for  Jefferson Dr & 14th St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_6 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_7 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_3 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_6 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_7 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 8s 21ms/step - loss: 0.0030 - accuracy: 0.4515 - mse: 0.0030 - val_loss: 0.0013 - val_accuracy: 0.4567 - val_mse: 0.0013\n","Epoch 2/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0013 - accuracy: 0.4515 - mse: 0.0013 - val_loss: 0.0012 - val_accuracy: 0.4567 - val_mse: 0.0012\n","Epoch 3/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0012 - accuracy: 0.4515 - mse: 0.0012 - val_loss: 0.0011 - val_accuracy: 0.4567 - val_mse: 0.0011\n","Epoch 4/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0011 - accuracy: 0.4515 - mse: 0.0011 - val_loss: 0.0010 - val_accuracy: 0.4567 - val_mse: 0.0010\n","Epoch 5/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0010 - accuracy: 0.4515 - mse: 0.0010 - val_loss: 9.9775e-04 - val_accuracy: 0.4567 - val_mse: 9.9775e-04\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 9.8745e-04 - accuracy: 0.4515 - mse: 9.8745e-04 - val_loss: 9.4668e-04 - val_accuracy: 0.4567 - val_mse: 9.4668e-04\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 9.3812e-04 - accuracy: 0.4515 - mse: 9.3812e-04 - val_loss: 9.3787e-04 - val_accuracy: 0.4567 - val_mse: 9.3787e-04\n","Epoch 8/20\n","280/280 [==============================] - 5s 16ms/step - loss: 9.0596e-04 - accuracy: 0.4515 - mse: 9.0596e-04 - val_loss: 8.9848e-04 - val_accuracy: 0.4567 - val_mse: 8.9848e-04\n","Epoch 9/20\n","280/280 [==============================] - 5s 16ms/step - loss: 8.6884e-04 - accuracy: 0.4516 - mse: 8.6884e-04 - val_loss: 9.0492e-04 - val_accuracy: 0.4567 - val_mse: 9.0492e-04\n","Epoch 10/20\n","280/280 [==============================] - 5s 16ms/step - loss: 8.5164e-04 - accuracy: 0.4516 - mse: 8.5164e-04 - val_loss: 8.6695e-04 - val_accuracy: 0.4567 - val_mse: 8.6695e-04\n","Epoch 11/20\n","280/280 [==============================] - 5s 16ms/step - loss: 8.2879e-04 - accuracy: 0.4516 - mse: 8.2879e-04 - val_loss: 8.8285e-04 - val_accuracy: 0.4567 - val_mse: 8.8285e-04\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 8.1865e-04 - accuracy: 0.4516 - mse: 8.1865e-04 - val_loss: 8.6346e-04 - val_accuracy: 0.4567 - val_mse: 8.6346e-04\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 8.0727e-04 - accuracy: 0.4516 - mse: 8.0727e-04 - val_loss: 8.6205e-04 - val_accuracy: 0.4567 - val_mse: 8.6205e-04\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 8.0211e-04 - accuracy: 0.4516 - mse: 8.0211e-04 - val_loss: 8.2425e-04 - val_accuracy: 0.4567 - val_mse: 8.2425e-04\n","Epoch 15/20\n","280/280 [==============================] - 5s 16ms/step - loss: 8.0935e-04 - accuracy: 0.4516 - mse: 8.0935e-04 - val_loss: 8.7583e-04 - val_accuracy: 0.4567 - val_mse: 8.7583e-04\n","Epoch 16/20\n","280/280 [==============================] - 5s 16ms/step - loss: 7.9331e-04 - accuracy: 0.4516 - mse: 7.9331e-04 - val_loss: 8.3989e-04 - val_accuracy: 0.4567 - val_mse: 8.3989e-04\n","Epoch 17/20\n","280/280 [==============================] - 5s 16ms/step - loss: 7.9691e-04 - accuracy: 0.4516 - mse: 7.9691e-04 - val_loss: 8.3343e-04 - val_accuracy: 0.4567 - val_mse: 8.3343e-04\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 7.9413e-04 - accuracy: 0.4516 - mse: 7.9413e-04 - val_loss: 8.3221e-04 - val_accuracy: 0.4567 - val_mse: 8.3221e-04\n","Epoch 19/20\n","280/280 [==============================] - 5s 16ms/step - loss: 7.8103e-04 - accuracy: 0.4516 - mse: 7.8103e-04 - val_loss: 8.2178e-04 - val_accuracy: 0.4567 - val_mse: 8.2178e-04\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 7.7673e-04 - accuracy: 0.4516 - mse: 7.7673e-04 - val_loss: 8.2808e-04 - val_accuracy: 0.4567 - val_mse: 8.2808e-04\n","model building for  Jefferson Dr & 14th St SW  done\n","index =  4\n","model building for  4th St & Madison Dr NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_8 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_9 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_4 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_8 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_9 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0063 - accuracy: 0.4541 - mse: 0.0063 - val_loss: 0.0043 - val_accuracy: 0.4602 - val_mse: 0.0043\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0043 - accuracy: 0.4541 - mse: 0.0043 - val_loss: 0.0038 - val_accuracy: 0.4602 - val_mse: 0.0038\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.4541 - mse: 0.0038 - val_loss: 0.0035 - val_accuracy: 0.4602 - val_mse: 0.0035\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4541 - mse: 0.0036 - val_loss: 0.0032 - val_accuracy: 0.4602 - val_mse: 0.0032\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0034 - accuracy: 0.4541 - mse: 0.0034 - val_loss: 0.0031 - val_accuracy: 0.4602 - val_mse: 0.0031\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.4541 - mse: 0.0033 - val_loss: 0.0032 - val_accuracy: 0.4602 - val_mse: 0.0032\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.4541 - mse: 0.0033 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0032 - accuracy: 0.4541 - mse: 0.0032 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 9/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0032 - accuracy: 0.4541 - mse: 0.0032 - val_loss: 0.0031 - val_accuracy: 0.4602 - val_mse: 0.0031\n","Epoch 10/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0032 - accuracy: 0.4541 - mse: 0.0032 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 11/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0031 - accuracy: 0.4541 - mse: 0.0031 - val_loss: 0.0029 - val_accuracy: 0.4602 - val_mse: 0.0029\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0031 - accuracy: 0.4541 - mse: 0.0031 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0031 - accuracy: 0.4541 - mse: 0.0031 - val_loss: 0.0031 - val_accuracy: 0.4602 - val_mse: 0.0031\n","Epoch 14/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0031 - accuracy: 0.4541 - mse: 0.0031 - val_loss: 0.0029 - val_accuracy: 0.4602 - val_mse: 0.0029\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0031 - accuracy: 0.4541 - mse: 0.0031 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 16/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.4541 - mse: 0.0030 - val_loss: 0.0029 - val_accuracy: 0.4602 - val_mse: 0.0029\n","Epoch 17/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.4541 - mse: 0.0030 - val_loss: 0.0030 - val_accuracy: 0.4602 - val_mse: 0.0030\n","Epoch 18/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.4541 - mse: 0.0030 - val_loss: 0.0029 - val_accuracy: 0.4602 - val_mse: 0.0029\n","Epoch 19/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0030 - accuracy: 0.4541 - mse: 0.0030 - val_loss: 0.0029 - val_accuracy: 0.4602 - val_mse: 0.0029\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0030 - accuracy: 0.4541 - mse: 0.0030 - val_loss: 0.0028 - val_accuracy: 0.4602 - val_mse: 0.0028\n","model building for  4th St & Madison Dr NW  done\n","index =  5\n","model building for  Henry Bacon Dr & Lincoln Memorial Circle NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_10 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_11 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_5 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_10 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_11 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0050 - accuracy: 0.4669 - mse: 0.0050 - val_loss: 0.0039 - val_accuracy: 0.4694 - val_mse: 0.0039\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4669 - mse: 0.0036 - val_loss: 0.0032 - val_accuracy: 0.4694 - val_mse: 0.0032\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0031 - accuracy: 0.4669 - mse: 0.0031 - val_loss: 0.0029 - val_accuracy: 0.4694 - val_mse: 0.0029\n","Epoch 4/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0030 - accuracy: 0.4669 - mse: 0.0030 - val_loss: 0.0028 - val_accuracy: 0.4694 - val_mse: 0.0028\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0028 - accuracy: 0.4669 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.4694 - val_mse: 0.0027\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0028 - accuracy: 0.4669 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.4694 - val_mse: 0.0027\n","Epoch 7/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0027 - accuracy: 0.4669 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.4694 - val_mse: 0.0026\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0027 - accuracy: 0.4669 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.4694 - val_mse: 0.0026\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.4694 - val_mse: 0.0026\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0028 - val_accuracy: 0.4694 - val_mse: 0.0028\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0026 - accuracy: 0.4669 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 17/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4669 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4694 - val_mse: 0.0025\n","model building for  Henry Bacon Dr & Lincoln Memorial Circle NW  done\n","index =  6\n","model building for  Massachusetts Ave & Dupont Circle NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_12 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_13 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_6 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_12 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_13 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0099 - accuracy: 0.3164 - mse: 0.0099 - val_loss: 0.0072 - val_accuracy: 0.3154 - val_mse: 0.0072\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3164 - mse: 0.0065 - val_loss: 0.0057 - val_accuracy: 0.3154 - val_mse: 0.0057\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0054 - accuracy: 0.3164 - mse: 0.0054 - val_loss: 0.0047 - val_accuracy: 0.3154 - val_mse: 0.0047\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3164 - mse: 0.0046 - val_loss: 0.0044 - val_accuracy: 0.3154 - val_mse: 0.0044\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0044 - accuracy: 0.3164 - mse: 0.0044 - val_loss: 0.0042 - val_accuracy: 0.3154 - val_mse: 0.0042\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3164 - mse: 0.0042 - val_loss: 0.0041 - val_accuracy: 0.3154 - val_mse: 0.0041\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3164 - mse: 0.0041 - val_loss: 0.0041 - val_accuracy: 0.3154 - val_mse: 0.0041\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0040 - accuracy: 0.3164 - mse: 0.0040 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0040 - accuracy: 0.3164 - mse: 0.0040 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0040 - accuracy: 0.3164 - mse: 0.0040 - val_loss: 0.0041 - val_accuracy: 0.3154 - val_mse: 0.0041\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0040 - accuracy: 0.3164 - mse: 0.0040 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3164 - mse: 0.0039 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3164 - mse: 0.0039 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3164 - mse: 0.0039 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3164 - mse: 0.0038 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3164 - mse: 0.0039 - val_loss: 0.0039 - val_accuracy: 0.3154 - val_mse: 0.0039\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3164 - mse: 0.0038 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 18/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0038 - accuracy: 0.3164 - mse: 0.0038 - val_loss: 0.0042 - val_accuracy: 0.3154 - val_mse: 0.0042\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3164 - mse: 0.0038 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3164 - mse: 0.0038 - val_loss: 0.0040 - val_accuracy: 0.3154 - val_mse: 0.0040\n","model building for  Massachusetts Ave & Dupont Circle NW  done\n","index =  7\n","model building for  1st & M St NE  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_14 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_15 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_7 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_14 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_15 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0125 - accuracy: 0.3066 - mse: 0.0125 - val_loss: 0.0080 - val_accuracy: 0.3096 - val_mse: 0.0080\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0082 - accuracy: 0.3066 - mse: 0.0082 - val_loss: 0.0070 - val_accuracy: 0.3096 - val_mse: 0.0070\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0074 - accuracy: 0.3066 - mse: 0.0074 - val_loss: 0.0066 - val_accuracy: 0.3096 - val_mse: 0.0066\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0068 - accuracy: 0.3066 - mse: 0.0068 - val_loss: 0.0062 - val_accuracy: 0.3096 - val_mse: 0.0062\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0066 - accuracy: 0.3066 - mse: 0.0066 - val_loss: 0.0064 - val_accuracy: 0.3096 - val_mse: 0.0064\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0064 - accuracy: 0.3066 - mse: 0.0064 - val_loss: 0.0062 - val_accuracy: 0.3096 - val_mse: 0.0062\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0063 - accuracy: 0.3066 - mse: 0.0063 - val_loss: 0.0059 - val_accuracy: 0.3096 - val_mse: 0.0059\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0062 - accuracy: 0.3066 - mse: 0.0062 - val_loss: 0.0059 - val_accuracy: 0.3096 - val_mse: 0.0059\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3066 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.3096 - val_mse: 0.0058\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3066 - mse: 0.0060 - val_loss: 0.0056 - val_accuracy: 0.3096 - val_mse: 0.0056\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3066 - mse: 0.0059 - val_loss: 0.0057 - val_accuracy: 0.3096 - val_mse: 0.0057\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3066 - mse: 0.0057 - val_loss: 0.0055 - val_accuracy: 0.3096 - val_mse: 0.0055\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3066 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.3096 - val_mse: 0.0056\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3066 - mse: 0.0057 - val_loss: 0.0055 - val_accuracy: 0.3096 - val_mse: 0.0055\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3066 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.3096 - val_mse: 0.0056\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3066 - mse: 0.0056 - val_loss: 0.0054 - val_accuracy: 0.3096 - val_mse: 0.0054\n","Epoch 17/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0056 - accuracy: 0.3066 - mse: 0.0056 - val_loss: 0.0054 - val_accuracy: 0.3096 - val_mse: 0.0054\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3066 - mse: 0.0056 - val_loss: 0.0055 - val_accuracy: 0.3096 - val_mse: 0.0055\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0055 - accuracy: 0.3066 - mse: 0.0055 - val_loss: 0.0053 - val_accuracy: 0.3096 - val_mse: 0.0053\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0055 - accuracy: 0.3066 - mse: 0.0055 - val_loss: 0.0054 - val_accuracy: 0.3096 - val_mse: 0.0054\n","model building for  1st & M St NE  done\n","index =  8\n","model building for  Smithsonian-National Mall / Jefferson Dr & 12th St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_8\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_16 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_17 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_8 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_16 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_17 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0054 - accuracy: 0.4793 - mse: 0.0054 - val_loss: 0.0032 - val_accuracy: 0.4845 - val_mse: 0.0032\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0031 - accuracy: 0.4793 - mse: 0.0031 - val_loss: 0.0028 - val_accuracy: 0.4845 - val_mse: 0.0028\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0027 - accuracy: 0.4793 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.4845 - val_mse: 0.0025\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0025 - accuracy: 0.4793 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.4845 - val_mse: 0.0023\n","Epoch 5/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0024 - accuracy: 0.4793 - mse: 0.0024 - val_loss: 0.0022 - val_accuracy: 0.4845 - val_mse: 0.0022\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0023 - accuracy: 0.4793 - mse: 0.0023 - val_loss: 0.0022 - val_accuracy: 0.4845 - val_mse: 0.0022\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0022 - accuracy: 0.4793 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0022 - accuracy: 0.4793 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0022 - accuracy: 0.4793 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.4845 - val_mse: 0.0021\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.4793 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.4845 - val_mse: 0.0020\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0020 - accuracy: 0.4793 - mse: 0.0020 - val_loss: 0.0020 - val_accuracy: 0.4845 - val_mse: 0.0020\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0020 - accuracy: 0.4793 - mse: 0.0020 - val_loss: 0.0020 - val_accuracy: 0.4845 - val_mse: 0.0020\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0020 - accuracy: 0.4793 - mse: 0.0020 - val_loss: 0.0020 - val_accuracy: 0.4845 - val_mse: 0.0020\n","model building for  Smithsonian-National Mall / Jefferson Dr & 12th St SW  done\n","index =  9\n","model building for  New Hampshire Ave & T St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_18 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_19 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_9 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_18 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_19 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0066 - accuracy: 0.2771 - mse: 0.0066 - val_loss: 0.0044 - val_accuracy: 0.2796 - val_mse: 0.0044\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0044 - accuracy: 0.2771 - mse: 0.0044 - val_loss: 0.0038 - val_accuracy: 0.2796 - val_mse: 0.0038\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.2771 - mse: 0.0039 - val_loss: 0.0037 - val_accuracy: 0.2796 - val_mse: 0.0037\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.2771 - mse: 0.0037 - val_loss: 0.0036 - val_accuracy: 0.2796 - val_mse: 0.0036\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.2771 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.2796 - val_mse: 0.0037\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.2771 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0035 - accuracy: 0.2771 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0035 - accuracy: 0.2771 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0035 - accuracy: 0.2771 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0034 - accuracy: 0.2771 - mse: 0.0034 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0035 - accuracy: 0.2771 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0034 - accuracy: 0.2771 - mse: 0.0034 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0034 - accuracy: 0.2771 - mse: 0.0034 - val_loss: 0.0035 - val_accuracy: 0.2796 - val_mse: 0.0035\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.2771 - mse: 0.0033 - val_loss: 0.0034 - val_accuracy: 0.2796 - val_mse: 0.0034\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.2771 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.2796 - val_mse: 0.0033\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.2771 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.2796 - val_mse: 0.0033\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0033 - accuracy: 0.2771 - mse: 0.0033 - val_loss: 0.0032 - val_accuracy: 0.2796 - val_mse: 0.0032\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0032 - accuracy: 0.2771 - mse: 0.0032 - val_loss: 0.0033 - val_accuracy: 0.2796 - val_mse: 0.0033\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0032 - accuracy: 0.2771 - mse: 0.0032 - val_loss: 0.0033 - val_accuracy: 0.2796 - val_mse: 0.0033\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0032 - accuracy: 0.2771 - mse: 0.0032 - val_loss: 0.0033 - val_accuracy: 0.2796 - val_mse: 0.0033\n","model building for  New Hampshire Ave & T St NW  done\n","index =  10\n","model building for  14th & V St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_20 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_21 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_10 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_20 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_21 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0094 - accuracy: 0.3065 - mse: 0.0094 - val_loss: 0.0065 - val_accuracy: 0.3000 - val_mse: 0.0065\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3065 - mse: 0.0065 - val_loss: 0.0059 - val_accuracy: 0.3000 - val_mse: 0.0059\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3065 - mse: 0.0060 - val_loss: 0.0055 - val_accuracy: 0.3000 - val_mse: 0.0055\n","Epoch 4/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0057 - accuracy: 0.3065 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.3000 - val_mse: 0.0056\n","Epoch 5/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0055 - accuracy: 0.3065 - mse: 0.0055 - val_loss: 0.0053 - val_accuracy: 0.3000 - val_mse: 0.0053\n","Epoch 6/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0053 - accuracy: 0.3065 - mse: 0.0053 - val_loss: 0.0050 - val_accuracy: 0.3000 - val_mse: 0.0050\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0052 - accuracy: 0.3065 - mse: 0.0052 - val_loss: 0.0049 - val_accuracy: 0.3000 - val_mse: 0.0049\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0051 - accuracy: 0.3065 - mse: 0.0051 - val_loss: 0.0048 - val_accuracy: 0.3002 - val_mse: 0.0048\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0049 - accuracy: 0.3065 - mse: 0.0049 - val_loss: 0.0046 - val_accuracy: 0.3000 - val_mse: 0.0046\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3065 - mse: 0.0048 - val_loss: 0.0047 - val_accuracy: 0.3000 - val_mse: 0.0047\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3065 - mse: 0.0048 - val_loss: 0.0049 - val_accuracy: 0.3002 - val_mse: 0.0049\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3065 - mse: 0.0048 - val_loss: 0.0046 - val_accuracy: 0.3000 - val_mse: 0.0046\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3065 - mse: 0.0047 - val_loss: 0.0045 - val_accuracy: 0.3002 - val_mse: 0.0045\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3065 - mse: 0.0047 - val_loss: 0.0044 - val_accuracy: 0.3002 - val_mse: 0.0044\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3065 - mse: 0.0047 - val_loss: 0.0045 - val_accuracy: 0.3000 - val_mse: 0.0045\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3065 - mse: 0.0048 - val_loss: 0.0045 - val_accuracy: 0.3002 - val_mse: 0.0045\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3065 - mse: 0.0047 - val_loss: 0.0045 - val_accuracy: 0.3002 - val_mse: 0.0045\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3065 - mse: 0.0046 - val_loss: 0.0044 - val_accuracy: 0.3002 - val_mse: 0.0044\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3065 - mse: 0.0046 - val_loss: 0.0046 - val_accuracy: 0.3002 - val_mse: 0.0046\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3065 - mse: 0.0046 - val_loss: 0.0045 - val_accuracy: 0.3002 - val_mse: 0.0045\n","model building for  14th & V St NW  done\n","index =  11\n","model building for  Jefferson Memorial  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_11\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_22 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_23 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_11 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_22 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_23 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0050 - accuracy: 0.5107 - mse: 0.0050 - val_loss: 0.0029 - val_accuracy: 0.5111 - val_mse: 0.0029\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0027 - accuracy: 0.5107 - mse: 0.0027 - val_loss: 0.0024 - val_accuracy: 0.5111 - val_mse: 0.0024\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0023 - accuracy: 0.5107 - mse: 0.0023 - val_loss: 0.0022 - val_accuracy: 0.5111 - val_mse: 0.0022\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0022 - accuracy: 0.5107 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.5112 - val_mse: 0.0021\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0021 - accuracy: 0.5107 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.5111 - val_mse: 0.0020\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0020 - accuracy: 0.5107 - mse: 0.0020 - val_loss: 0.0020 - val_accuracy: 0.5112 - val_mse: 0.0020\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0020 - accuracy: 0.5107 - mse: 0.0020 - val_loss: 0.0019 - val_accuracy: 0.5111 - val_mse: 0.0019\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0019 - accuracy: 0.5107 - mse: 0.0019 - val_loss: 0.0019 - val_accuracy: 0.5112 - val_mse: 0.0019\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0019 - accuracy: 0.5107 - mse: 0.0019 - val_loss: 0.0020 - val_accuracy: 0.5111 - val_mse: 0.0020\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0019 - accuracy: 0.5107 - mse: 0.0019 - val_loss: 0.0019 - val_accuracy: 0.5112 - val_mse: 0.0019\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0019 - val_accuracy: 0.5111 - val_mse: 0.0019\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0019 - val_accuracy: 0.5111 - val_mse: 0.0019\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5111 - val_mse: 0.0018\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5112 - val_mse: 0.0018\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5111 - val_mse: 0.0018\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0019 - val_accuracy: 0.5112 - val_mse: 0.0019\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5111 - val_mse: 0.0018\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5112 - val_mse: 0.0018\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0018 - accuracy: 0.5107 - mse: 0.0018 - val_loss: 0.0018 - val_accuracy: 0.5112 - val_mse: 0.0018\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0017 - accuracy: 0.5107 - mse: 0.0017 - val_loss: 0.0019 - val_accuracy: 0.5112 - val_mse: 0.0019\n","model building for  Jefferson Memorial  done\n","index =  12\n","model building for  15th St & Constitution Ave NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_12\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_24 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_25 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_12 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_24 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_25 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 22ms/step - loss: 0.0063 - accuracy: 0.4976 - mse: 0.0063 - val_loss: 0.0050 - val_accuracy: 0.4956 - val_mse: 0.0050\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0045 - accuracy: 0.4976 - mse: 0.0045 - val_loss: 0.0045 - val_accuracy: 0.4956 - val_mse: 0.0045\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.4976 - mse: 0.0042 - val_loss: 0.0042 - val_accuracy: 0.4956 - val_mse: 0.0042\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0040 - accuracy: 0.4976 - mse: 0.0040 - val_loss: 0.0042 - val_accuracy: 0.4958 - val_mse: 0.0042\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.4976 - mse: 0.0039 - val_loss: 0.0042 - val_accuracy: 0.4958 - val_mse: 0.0042\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.4976 - mse: 0.0039 - val_loss: 0.0040 - val_accuracy: 0.4958 - val_mse: 0.0040\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.4976 - mse: 0.0038 - val_loss: 0.0040 - val_accuracy: 0.4958 - val_mse: 0.0040\n","Epoch 8/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0038 - accuracy: 0.4976 - mse: 0.0038 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 9/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0037 - accuracy: 0.4976 - mse: 0.0037 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.4976 - mse: 0.0037 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.4976 - mse: 0.0037 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4976 - mse: 0.0036 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4976 - mse: 0.0036 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4976 - mse: 0.0036 - val_loss: 0.0038 - val_accuracy: 0.4958 - val_mse: 0.0038\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4976 - mse: 0.0036 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.4976 - mse: 0.0036 - val_loss: 0.0039 - val_accuracy: 0.4958 - val_mse: 0.0039\n","model building for  15th St & Constitution Ave NW  done\n","index =  13\n","model building for  14th & Rhode Island Ave NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_13\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_26 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_27 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_13 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_26 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_27 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0096 - accuracy: 0.3512 - mse: 0.0096 - val_loss: 0.0065 - val_accuracy: 0.3523 - val_mse: 0.0065\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0070 - accuracy: 0.3513 - mse: 0.0070 - val_loss: 0.0063 - val_accuracy: 0.3523 - val_mse: 0.0063\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3513 - mse: 0.0065 - val_loss: 0.0062 - val_accuracy: 0.3523 - val_mse: 0.0062\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0063 - accuracy: 0.3513 - mse: 0.0063 - val_loss: 0.0059 - val_accuracy: 0.3523 - val_mse: 0.0059\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.3513 - mse: 0.0061 - val_loss: 0.0059 - val_accuracy: 0.3523 - val_mse: 0.0059\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3513 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.3523 - val_mse: 0.0058\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3513 - mse: 0.0060 - val_loss: 0.0061 - val_accuracy: 0.3523 - val_mse: 0.0061\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3513 - mse: 0.0059 - val_loss: 0.0057 - val_accuracy: 0.3523 - val_mse: 0.0057\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3513 - mse: 0.0059 - val_loss: 0.0059 - val_accuracy: 0.3523 - val_mse: 0.0059\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3513 - mse: 0.0058 - val_loss: 0.0057 - val_accuracy: 0.3523 - val_mse: 0.0057\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3513 - mse: 0.0057 - val_loss: 0.0061 - val_accuracy: 0.3523 - val_mse: 0.0061\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3513 - mse: 0.0056 - val_loss: 0.0055 - val_accuracy: 0.3523 - val_mse: 0.0055\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0055 - accuracy: 0.3513 - mse: 0.0055 - val_loss: 0.0056 - val_accuracy: 0.3523 - val_mse: 0.0056\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0055 - accuracy: 0.3513 - mse: 0.0055 - val_loss: 0.0054 - val_accuracy: 0.3523 - val_mse: 0.0054\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0054 - accuracy: 0.3513 - mse: 0.0054 - val_loss: 0.0053 - val_accuracy: 0.3523 - val_mse: 0.0053\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0054 - accuracy: 0.3513 - mse: 0.0054 - val_loss: 0.0052 - val_accuracy: 0.3523 - val_mse: 0.0052\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0053 - accuracy: 0.3513 - mse: 0.0053 - val_loss: 0.0052 - val_accuracy: 0.3523 - val_mse: 0.0052\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0053 - accuracy: 0.3513 - mse: 0.0053 - val_loss: 0.0054 - val_accuracy: 0.3523 - val_mse: 0.0054\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0054 - accuracy: 0.3513 - mse: 0.0054 - val_loss: 0.0055 - val_accuracy: 0.3523 - val_mse: 0.0055\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0055 - accuracy: 0.3513 - mse: 0.0055 - val_loss: 0.0054 - val_accuracy: 0.3523 - val_mse: 0.0054\n","model building for  14th & Rhode Island Ave NW  done\n","index =  14\n","model building for  5th & K St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_14\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_28 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_29 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_14 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_28 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_29 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 22ms/step - loss: 0.0076 - accuracy: 0.3431 - mse: 0.0076 - val_loss: 0.0055 - val_accuracy: 0.3612 - val_mse: 0.0055\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3431 - mse: 0.0056 - val_loss: 0.0049 - val_accuracy: 0.3612 - val_mse: 0.0049\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0051 - accuracy: 0.3431 - mse: 0.0051 - val_loss: 0.0048 - val_accuracy: 0.3612 - val_mse: 0.0048\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3431 - mse: 0.0048 - val_loss: 0.0044 - val_accuracy: 0.3612 - val_mse: 0.0044\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3431 - mse: 0.0046 - val_loss: 0.0042 - val_accuracy: 0.3612 - val_mse: 0.0042\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0045 - accuracy: 0.3431 - mse: 0.0045 - val_loss: 0.0042 - val_accuracy: 0.3612 - val_mse: 0.0042\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0044 - accuracy: 0.3431 - mse: 0.0044 - val_loss: 0.0039 - val_accuracy: 0.3612 - val_mse: 0.0039\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0043 - accuracy: 0.3431 - mse: 0.0043 - val_loss: 0.0040 - val_accuracy: 0.3612 - val_mse: 0.0040\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0043 - accuracy: 0.3431 - mse: 0.0043 - val_loss: 0.0040 - val_accuracy: 0.3612 - val_mse: 0.0040\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3431 - mse: 0.0042 - val_loss: 0.0039 - val_accuracy: 0.3612 - val_mse: 0.0039\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3431 - mse: 0.0042 - val_loss: 0.0039 - val_accuracy: 0.3612 - val_mse: 0.0039\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3432 - mse: 0.0042 - val_loss: 0.0040 - val_accuracy: 0.3612 - val_mse: 0.0040\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3431 - mse: 0.0042 - val_loss: 0.0039 - val_accuracy: 0.3612 - val_mse: 0.0039\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0042 - accuracy: 0.3432 - mse: 0.0042 - val_loss: 0.0040 - val_accuracy: 0.3612 - val_mse: 0.0040\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3431 - mse: 0.0041 - val_loss: 0.0038 - val_accuracy: 0.3612 - val_mse: 0.0038\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3432 - mse: 0.0041 - val_loss: 0.0040 - val_accuracy: 0.3612 - val_mse: 0.0040\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3431 - mse: 0.0041 - val_loss: 0.0039 - val_accuracy: 0.3612 - val_mse: 0.0039\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3431 - mse: 0.0041 - val_loss: 0.0038 - val_accuracy: 0.3612 - val_mse: 0.0038\n","Epoch 19/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0041 - accuracy: 0.3432 - mse: 0.0041 - val_loss: 0.0038 - val_accuracy: 0.3612 - val_mse: 0.0038\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3431 - mse: 0.0041 - val_loss: 0.0038 - val_accuracy: 0.3612 - val_mse: 0.0038\n","model building for  5th & K St NW  done\n","index =  15\n","model building for  4th & M St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_15\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_30 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_31 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_15 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_30 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_31 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0108 - accuracy: 0.3784 - mse: 0.0108 - val_loss: 0.0074 - val_accuracy: 0.3760 - val_mse: 0.0074\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0074 - accuracy: 0.3784 - mse: 0.0074 - val_loss: 0.0068 - val_accuracy: 0.3760 - val_mse: 0.0068\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0068 - accuracy: 0.3784 - mse: 0.0068 - val_loss: 0.0066 - val_accuracy: 0.3760 - val_mse: 0.0066\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3784 - mse: 0.0065 - val_loss: 0.0063 - val_accuracy: 0.3760 - val_mse: 0.0063\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0063 - accuracy: 0.3784 - mse: 0.0063 - val_loss: 0.0062 - val_accuracy: 0.3760 - val_mse: 0.0062\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.3784 - mse: 0.0061 - val_loss: 0.0062 - val_accuracy: 0.3760 - val_mse: 0.0062\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.3784 - mse: 0.0061 - val_loss: 0.0061 - val_accuracy: 0.3760 - val_mse: 0.0061\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3784 - mse: 0.0060 - val_loss: 0.0060 - val_accuracy: 0.3760 - val_mse: 0.0060\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3784 - mse: 0.0060 - val_loss: 0.0060 - val_accuracy: 0.3760 - val_mse: 0.0060\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3784 - mse: 0.0060 - val_loss: 0.0060 - val_accuracy: 0.3760 - val_mse: 0.0060\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3784 - mse: 0.0059 - val_loss: 0.0059 - val_accuracy: 0.3760 - val_mse: 0.0059\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3784 - mse: 0.0059 - val_loss: 0.0059 - val_accuracy: 0.3760 - val_mse: 0.0059\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3784 - mse: 0.0059 - val_loss: 0.0059 - val_accuracy: 0.3760 - val_mse: 0.0059\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3784 - mse: 0.0058 - val_loss: 0.0059 - val_accuracy: 0.3760 - val_mse: 0.0059\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3784 - mse: 0.0057 - val_loss: 0.0058 - val_accuracy: 0.3760 - val_mse: 0.0058\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3784 - mse: 0.0057 - val_loss: 0.0058 - val_accuracy: 0.3760 - val_mse: 0.0058\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3784 - mse: 0.0057 - val_loss: 0.0057 - val_accuracy: 0.3760 - val_mse: 0.0057\n","Epoch 18/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0056 - accuracy: 0.3784 - mse: 0.0056 - val_loss: 0.0058 - val_accuracy: 0.3760 - val_mse: 0.0058\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3784 - mse: 0.0056 - val_loss: 0.0057 - val_accuracy: 0.3760 - val_mse: 0.0057\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3785 - mse: 0.0056 - val_loss: 0.0056 - val_accuracy: 0.3760 - val_mse: 0.0056\n","model building for  4th & M St SW  done\n","index =  16\n","model building for  8th & O St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_32 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_33 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_16 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_32 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_33 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0102 - accuracy: 0.3389 - mse: 0.0102 - val_loss: 0.0075 - val_accuracy: 0.3465 - val_mse: 0.0075\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0075 - accuracy: 0.3389 - mse: 0.0075 - val_loss: 0.0068 - val_accuracy: 0.3465 - val_mse: 0.0068\n","Epoch 3/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0069 - accuracy: 0.3389 - mse: 0.0069 - val_loss: 0.0068 - val_accuracy: 0.3465 - val_mse: 0.0068\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0067 - accuracy: 0.3389 - mse: 0.0067 - val_loss: 0.0064 - val_accuracy: 0.3465 - val_mse: 0.0064\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3389 - mse: 0.0065 - val_loss: 0.0063 - val_accuracy: 0.3465 - val_mse: 0.0063\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0065 - accuracy: 0.3389 - mse: 0.0065 - val_loss: 0.0062 - val_accuracy: 0.3465 - val_mse: 0.0062\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0064 - accuracy: 0.3390 - mse: 0.0064 - val_loss: 0.0062 - val_accuracy: 0.3465 - val_mse: 0.0062\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0062 - accuracy: 0.3389 - mse: 0.0062 - val_loss: 0.0061 - val_accuracy: 0.3465 - val_mse: 0.0061\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0061 - accuracy: 0.3389 - mse: 0.0061 - val_loss: 0.0060 - val_accuracy: 0.3465 - val_mse: 0.0060\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0060 - accuracy: 0.3389 - mse: 0.0060 - val_loss: 0.0059 - val_accuracy: 0.3465 - val_mse: 0.0059\n","Epoch 11/20\n","280/280 [==============================] - 5s 16ms/step - loss: 0.0060 - accuracy: 0.3389 - mse: 0.0060 - val_loss: 0.0058 - val_accuracy: 0.3465 - val_mse: 0.0058\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3389 - mse: 0.0059 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0059 - accuracy: 0.3390 - mse: 0.0059 - val_loss: 0.0058 - val_accuracy: 0.3465 - val_mse: 0.0058\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3389 - mse: 0.0058 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3389 - mse: 0.0058 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3390 - mse: 0.0058 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0058 - accuracy: 0.3390 - mse: 0.0058 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3390 - mse: 0.0057 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3390 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.3465 - val_mse: 0.0056\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0057 - accuracy: 0.3389 - mse: 0.0057 - val_loss: 0.0057 - val_accuracy: 0.3465 - val_mse: 0.0057\n","model building for  8th & O St NW  done\n","index =  17\n","model building for  Thomas Circle  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_17\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_34 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_35 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_17 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_34 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_35 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 22ms/step - loss: 0.0071 - accuracy: 0.3330 - mse: 0.0071 - val_loss: 0.0050 - val_accuracy: 0.3316 - val_mse: 0.0050\n","Epoch 2/20\n","280/280 [==============================] - 5s 18ms/step - loss: 0.0053 - accuracy: 0.3330 - mse: 0.0053 - val_loss: 0.0045 - val_accuracy: 0.3316 - val_mse: 0.0045\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0049 - accuracy: 0.3330 - mse: 0.0049 - val_loss: 0.0042 - val_accuracy: 0.3316 - val_mse: 0.0042\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0045 - accuracy: 0.3330 - mse: 0.0045 - val_loss: 0.0042 - val_accuracy: 0.3316 - val_mse: 0.0042\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0043 - accuracy: 0.3330 - mse: 0.0043 - val_loss: 0.0039 - val_accuracy: 0.3316 - val_mse: 0.0039\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0041 - accuracy: 0.3330 - mse: 0.0041 - val_loss: 0.0038 - val_accuracy: 0.3316 - val_mse: 0.0038\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3330 - mse: 0.0039 - val_loss: 0.0039 - val_accuracy: 0.3316 - val_mse: 0.0039\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0039 - accuracy: 0.3330 - mse: 0.0039 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3330 - mse: 0.0038 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3330 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.3316 - val_mse: 0.0037\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0038 - accuracy: 0.3330 - mse: 0.0038 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.3330 - mse: 0.0037 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.3330 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.3316 - val_mse: 0.0035\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.3330 - mse: 0.0036 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.3330 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3316 - val_mse: 0.0035\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.3330 - mse: 0.0036 - val_loss: 0.0036 - val_accuracy: 0.3316 - val_mse: 0.0036\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.3330 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.3316 - val_mse: 0.0035\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0035 - accuracy: 0.3330 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.3316 - val_mse: 0.0035\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0036 - accuracy: 0.3330 - mse: 0.0036 - val_loss: 0.0039 - val_accuracy: 0.3316 - val_mse: 0.0039\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0037 - accuracy: 0.3330 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3316 - val_mse: 0.0035\n","model building for  Thomas Circle  done\n","index =  18\n","model building for  11th & M St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_18\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_36 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_37 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_18 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_36 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_37 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0072 - accuracy: 0.3451 - mse: 0.0072 - val_loss: 0.0057 - val_accuracy: 0.3397 - val_mse: 0.0057\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0056 - accuracy: 0.3451 - mse: 0.0056 - val_loss: 0.0054 - val_accuracy: 0.3397 - val_mse: 0.0054\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0053 - accuracy: 0.3451 - mse: 0.0053 - val_loss: 0.0052 - val_accuracy: 0.3397 - val_mse: 0.0052\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0051 - accuracy: 0.3451 - mse: 0.0051 - val_loss: 0.0052 - val_accuracy: 0.3397 - val_mse: 0.0052\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0050 - accuracy: 0.3451 - mse: 0.0050 - val_loss: 0.0051 - val_accuracy: 0.3397 - val_mse: 0.0051\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0050 - accuracy: 0.3451 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3397 - val_mse: 0.0052\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0049 - accuracy: 0.3451 - mse: 0.0049 - val_loss: 0.0051 - val_accuracy: 0.3397 - val_mse: 0.0051\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0049 - accuracy: 0.3451 - mse: 0.0049 - val_loss: 0.0050 - val_accuracy: 0.3397 - val_mse: 0.0050\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0049 - accuracy: 0.3451 - mse: 0.0049 - val_loss: 0.0050 - val_accuracy: 0.3397 - val_mse: 0.0050\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3451 - mse: 0.0048 - val_loss: 0.0051 - val_accuracy: 0.3397 - val_mse: 0.0051\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3451 - mse: 0.0048 - val_loss: 0.0051 - val_accuracy: 0.3397 - val_mse: 0.0051\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3451 - mse: 0.0048 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0048 - accuracy: 0.3451 - mse: 0.0048 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3451 - mse: 0.0047 - val_loss: 0.0050 - val_accuracy: 0.3397 - val_mse: 0.0050\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3451 - mse: 0.0047 - val_loss: 0.0050 - val_accuracy: 0.3397 - val_mse: 0.0050\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0047 - accuracy: 0.3451 - mse: 0.0047 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3451 - mse: 0.0046 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3451 - mse: 0.0046 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3451 - mse: 0.0046 - val_loss: 0.0049 - val_accuracy: 0.3397 - val_mse: 0.0049\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0046 - accuracy: 0.3451 - mse: 0.0046 - val_loss: 0.0048 - val_accuracy: 0.3397 - val_mse: 0.0048\n","model building for  11th & M St NW  done\n","index =  19\n","model building for  14th & Irving St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_19\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_38 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_39 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_19 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_38 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_39 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 9s 21ms/step - loss: 0.0126 - accuracy: 0.3783 - mse: 0.0126 - val_loss: 0.0090 - val_accuracy: 0.3778 - val_mse: 0.0090\n","Epoch 2/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0092 - accuracy: 0.3783 - mse: 0.0092 - val_loss: 0.0083 - val_accuracy: 0.3778 - val_mse: 0.0083\n","Epoch 3/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0085 - accuracy: 0.3783 - mse: 0.0085 - val_loss: 0.0080 - val_accuracy: 0.3778 - val_mse: 0.0080\n","Epoch 4/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0082 - accuracy: 0.3783 - mse: 0.0082 - val_loss: 0.0078 - val_accuracy: 0.3778 - val_mse: 0.0078\n","Epoch 5/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0080 - accuracy: 0.3783 - mse: 0.0080 - val_loss: 0.0077 - val_accuracy: 0.3778 - val_mse: 0.0077\n","Epoch 6/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0078 - accuracy: 0.3783 - mse: 0.0078 - val_loss: 0.0075 - val_accuracy: 0.3778 - val_mse: 0.0075\n","Epoch 7/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0076 - accuracy: 0.3783 - mse: 0.0076 - val_loss: 0.0075 - val_accuracy: 0.3778 - val_mse: 0.0075\n","Epoch 8/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0075 - accuracy: 0.3783 - mse: 0.0075 - val_loss: 0.0073 - val_accuracy: 0.3778 - val_mse: 0.0073\n","Epoch 9/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0074 - accuracy: 0.3783 - mse: 0.0074 - val_loss: 0.0073 - val_accuracy: 0.3778 - val_mse: 0.0073\n","Epoch 10/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0073 - accuracy: 0.3783 - mse: 0.0073 - val_loss: 0.0073 - val_accuracy: 0.3778 - val_mse: 0.0073\n","Epoch 11/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0073 - accuracy: 0.3783 - mse: 0.0073 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 12/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0072 - accuracy: 0.3783 - mse: 0.0072 - val_loss: 0.0072 - val_accuracy: 0.3778 - val_mse: 0.0072\n","Epoch 13/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0072 - accuracy: 0.3783 - mse: 0.0072 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 14/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0071 - accuracy: 0.3783 - mse: 0.0071 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 15/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0071 - accuracy: 0.3783 - mse: 0.0071 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 16/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0071 - accuracy: 0.3783 - mse: 0.0071 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 17/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0070 - accuracy: 0.3783 - mse: 0.0070 - val_loss: 0.0072 - val_accuracy: 0.3778 - val_mse: 0.0072\n","Epoch 18/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0070 - accuracy: 0.3783 - mse: 0.0070 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 19/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0070 - accuracy: 0.3783 - mse: 0.0070 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","Epoch 20/20\n","280/280 [==============================] - 5s 17ms/step - loss: 0.0070 - accuracy: 0.3783 - mse: 0.0070 - val_loss: 0.0071 - val_accuracy: 0.3778 - val_mse: 0.0071\n","model building for  14th & Irving St NW  done\n","Âü∑Ë°åÊôÇÈñìÔºö2693.252037 Áßí\n"]}],"source":["import time\n","# ÈñãÂßãÊ∏¨Èáè\n","start = time.time()\n","# ÁÇ∫ÊØèÂÄãÁ´ôÈªûÂª∫Ê®°\n","\n","\n","# ÂâµÈÄ†Áõ∏ÂêåÊôÇÈñìÈñìÈöîÁöÑtime column\n","from datetime import datetime , timedelta\n","from pandas import DataFrame\n","all_time = []\n","start_time = datetime.strptime(\"2018-01-01 00:00:00\" , \"%Y-%m-%d %H:%M:%S\")    \n","end_time = datetime.strptime(\"2021-12-31 23:00:00\" , \"%Y-%m-%d %H:%M:%S\")    \n","current_date = start_time.date()\n","\n","while current_date <= end_time.date() :\n","  i = 0\n","  for i in range (0,24) :\n","    current_data_str = current_date.strftime(\"%Y-%m-%d\") \n","    all_time.append(\"%s\"%str(current_data_str)+\" %i:00:00\"%(i))\n","    i = i+1 \n","  current_date = current_date + timedelta(days=1)\n","  \n","all_time = pd.DataFrame(all_time)\n","all_time.columns = [\"Time\"]\n","all_time['Time'] = pd.to_datetime(all_time['Time'])\n","# print('all_time data')\n","# print(all_time)\n","index = 0\n","\n","#right order\n","for station in station_rank:\n","  print('index = ', index)\n","  print('model building for ', station, ' start')\n","  picked_station_data = produce_picked_station_data(start_st_model, station)\n","  picked_station_data = feature_engineering(picked_station_data, all_time)\n","  # print('check data')\n","  # print(picked_station_data)\n","  picked_station_data = scaling(picked_station_data, 'to_cnt')\n","  x_train, y_train = build_training_data(picked_station_data, used_days=7)\n","  x_train, y_train = shuffle(x_train,y_train)\n","  x_train, y_train, x_val, y_val = build_training_and_validation_data(x_train, y_train, 0.2)\n","  \n","  model = buildManyToOneModel(x_train.shape)\n","  callback = EarlyStopping(monitor=\"loss\", patience=10, verbose=1, mode=\"auto\")\n","  history = model.fit(x_train, y_train, epochs=20, batch_size=100, validation_data=(x_val, y_val), callbacks=[callback])\n","  #Áï´Âúñ\n","  # plt.title(\"Train_Loss\")\n","  # plt.ylabel(\"Loss\")\n","  # plt.xlabel('Epoch')\n","  # plt.plot(history.history[\"loss\"])\n","  # plt.plot(history.history[\"val_loss\"])\n","  # plt.show()\n","  #ÂÑ≤Â≠òÊ®°Âûã\n","  path = \"/content/drive/MyDrive/Â∞àÈ°åÁ†îÁ©∂üí™/sharingbike/2Â±§LSTM/ToModel_station\" + str(index)\n","  path += '.h5'\n","  model.save(path)\n","  index += 1\n","  print('model building for ', station, ' done')\n","# ÁµêÊùüÊ∏¨Èáè\n","end = time.time()\n","\n","# Ëº∏Âá∫ÁµêÊûú\n","print(\"Âü∑Ë°åÊôÇÈñìÔºö%f Áßí\" % (end - start))\n"]}],"metadata":{"colab":{"name":"5/17ÈÄ≤Á´ômodel (LSTM2) ","provenance":[{"file_id":"1mfyQYCP6b3ZKkx6U2IW3pR32ZxCKcWrq","timestamp":1652710284426}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}