{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18357,"status":"ok","timestamp":1652766585055,"user":{"displayName":"ÈΩãËó§È£õÈ≥•","userId":"04794182654464766810"},"user_tz":-480},"id":"3eptBgSZCOgt","outputId":"84907b29-b1b5-4fff-bc41-89ab27f13b36"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KE0QZiA7CW-j"},"outputs":[],"source":["from glob import glob\n","from datetime import datetime\n","from scipy.stats import ttest_ind\n","from sklearn.preprocessing import MaxAbsScaler\n","\n","import random\n","import calendar\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","\n","import pandas as pd\n","import numpy as np\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten, LSTM, TimeDistributed, RepeatVector\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":10124,"status":"ok","timestamp":1652766602292,"user":{"displayName":"ÈΩãËó§È£õÈ≥•","userId":"04794182654464766810"},"user_tz":-480},"id":"R7idxtqfCaCt","outputId":"b280c257-e88b-4132-953f-714e17ea15b2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            started_at                    Start station  \\\n","0  2018-01-01 00:14:30    15th St & Constitution Ave NW   \n","1  2018-01-01 00:14:53    15th St & Constitution Ave NW   \n","2  2018-01-01 00:42:08                   14th & V St NW   \n","3  2018-01-01 01:03:23                   14th & V St NW   \n","4  2018-01-01 01:13:43  Columbus Circle / Union Station   \n","\n","                     End station               end_at  is_weekend Member type  \\\n","0  15th St & Constitution Ave NW  2018-01-01 00:35:53           0      casual   \n","1  15th St & Constitution Ave NW  2018-01-01 00:35:58           0      casual   \n","2                 11th & O St NW  2018-01-01 00:49:25           0      member   \n","3       18th St & Wyoming Ave NW  2018-01-01 01:09:47           0      member   \n","4       4th & East Capitol St NE  2018-01-01 01:18:25           0      member   \n","\n","  weekday         period  year  month  hour  \n","0  monday  Early morning  2018      1     0  \n","1  monday  Early morning  2018      1     0  \n","2  monday  Early morning  2018      1     0  \n","3  monday  Early morning  2018      1     1  \n","4  monday  Early morning  2018      1     1  "],"text/html":["\n","  <div id=\"df-86c4685d-f3f8-4a46-9620-b76632c70f5e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>started_at</th>\n","      <th>Start station</th>\n","      <th>End station</th>\n","      <th>end_at</th>\n","      <th>is_weekend</th>\n","      <th>Member type</th>\n","      <th>weekday</th>\n","      <th>period</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01 00:14:30</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>2018-01-01 00:35:53</td>\n","      <td>0</td>\n","      <td>casual</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01 00:14:53</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>15th St &amp; Constitution Ave NW</td>\n","      <td>2018-01-01 00:35:58</td>\n","      <td>0</td>\n","      <td>casual</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01 00:42:08</td>\n","      <td>14th &amp; V St NW</td>\n","      <td>11th &amp; O St NW</td>\n","      <td>2018-01-01 00:49:25</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01 01:03:23</td>\n","      <td>14th &amp; V St NW</td>\n","      <td>18th St &amp; Wyoming Ave NW</td>\n","      <td>2018-01-01 01:09:47</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01 01:13:43</td>\n","      <td>Columbus Circle / Union Station</td>\n","      <td>4th &amp; East Capitol St NE</td>\n","      <td>2018-01-01 01:18:25</td>\n","      <td>0</td>\n","      <td>member</td>\n","      <td>monday</td>\n","      <td>Early morning</td>\n","      <td>2018</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86c4685d-f3f8-4a46-9620-b76632c70f5e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-86c4685d-f3f8-4a46-9620-b76632c70f5e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-86c4685d-f3f8-4a46-9620-b76632c70f5e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}],"source":["# ÈÄ≤Á´ôÊµÅÈáèÂâç20ÂêçÁöÑÁ´ôÈªûË≥áÊñô\n","start_st = pd.read_csv('/content/drive/MyDrive/Â∞àÈ°åÁ†îÁ©∂üí™/sharingbike/Rent_top20.csv')\n","start_st.head() "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"executionInfo":{"elapsed":406,"status":"ok","timestamp":1652766602694,"user":{"displayName":"ÈΩãËó§È£õÈ≥•","userId":"04794182654464766810"},"user_tz":-480},"id":"2VvDQ0Kub3Nm","outputId":"96d33af2-10e3-4321-e591-ce6055104ce9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                      hour\n","Start station                                             \n","Columbus Circle / Union Station                     160349\n","Lincoln Memorial                                    142007\n","4th St & Madison Dr NW                              122868\n","Jefferson Dr & 14th St SW                           121907\n","15th & P St NW                                      121888\n","New Hampshire Ave & T St NW                         116444\n","Henry Bacon Dr & Lincoln Memorial Circle NW         116416\n","1st & M St NE                                       109054\n","Smithsonian-National Mall / Jefferson Dr & 12th...  108759\n","Massachusetts Ave & Dupont Circle NW                 99619\n","14th & Irving St NW                                  98044\n","Thomas Circle                                        92076\n","Jefferson Memorial                                   89981\n","14th & V St NW                                       89688\n","11th & M St NW                                       83034\n","8th & O St NW                                        81798\n","5th & K St NW                                        80903\n","14th & Rhode Island Ave NW                           79817\n","15th St & Constitution Ave NW                        78264\n","4th & M St SW                                        76921"],"text/html":["\n","  <div id=\"df-22b8c5f7-1486-4f08-9bfc-e740360d6b10\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hour</th>\n","    </tr>\n","    <tr>\n","      <th>Start station</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Columbus Circle / Union Station</th>\n","      <td>160349</td>\n","    </tr>\n","    <tr>\n","      <th>Lincoln Memorial</th>\n","      <td>142007</td>\n","    </tr>\n","    <tr>\n","      <th>4th St &amp; Madison Dr NW</th>\n","      <td>122868</td>\n","    </tr>\n","    <tr>\n","      <th>Jefferson Dr &amp; 14th St SW</th>\n","      <td>121907</td>\n","    </tr>\n","    <tr>\n","      <th>15th &amp; P St NW</th>\n","      <td>121888</td>\n","    </tr>\n","    <tr>\n","      <th>New Hampshire Ave &amp; T St NW</th>\n","      <td>116444</td>\n","    </tr>\n","    <tr>\n","      <th>Henry Bacon Dr &amp; Lincoln Memorial Circle NW</th>\n","      <td>116416</td>\n","    </tr>\n","    <tr>\n","      <th>1st &amp; M St NE</th>\n","      <td>109054</td>\n","    </tr>\n","    <tr>\n","      <th>Smithsonian-National Mall / Jefferson Dr &amp; 12th St SW</th>\n","      <td>108759</td>\n","    </tr>\n","    <tr>\n","      <th>Massachusetts Ave &amp; Dupont Circle NW</th>\n","      <td>99619</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; Irving St NW</th>\n","      <td>98044</td>\n","    </tr>\n","    <tr>\n","      <th>Thomas Circle</th>\n","      <td>92076</td>\n","    </tr>\n","    <tr>\n","      <th>Jefferson Memorial</th>\n","      <td>89981</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; V St NW</th>\n","      <td>89688</td>\n","    </tr>\n","    <tr>\n","      <th>11th &amp; M St NW</th>\n","      <td>83034</td>\n","    </tr>\n","    <tr>\n","      <th>8th &amp; O St NW</th>\n","      <td>81798</td>\n","    </tr>\n","    <tr>\n","      <th>5th &amp; K St NW</th>\n","      <td>80903</td>\n","    </tr>\n","    <tr>\n","      <th>14th &amp; Rhode Island Ave NW</th>\n","      <td>79817</td>\n","    </tr>\n","    <tr>\n","      <th>15th St &amp; Constitution Ave NW</th>\n","      <td>78264</td>\n","    </tr>\n","    <tr>\n","      <th>4th &amp; M St SW</th>\n","      <td>76921</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22b8c5f7-1486-4f08-9bfc-e740360d6b10')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-22b8c5f7-1486-4f08-9bfc-e740360d6b10 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-22b8c5f7-1486-4f08-9bfc-e740360d6b10');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}],"source":["# ÊØèÁ´ôÂÄüËªäÈáè(ÊúÄÂ§ßÂà∞ÊúÄÂ∞è)\n","station_count =pd.DataFrame(start_st.groupby(['Start station'])['hour'].count())\n","station_count.sort_values(by=['hour'], inplace=True, ascending=False)\n","station_rank = list(station_count.index)\n","station_count"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":1311,"status":"ok","timestamp":1652766604002,"user":{"displayName":"ÈΩãËó§È£õÈ≥•","userId":"04794182654464766810"},"user_tz":-480},"id":"wHK0hT7OFdwS","outputId":"0c6ae739-528c-419b-af25-780cbf3ea141"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                Start station    groupby_col  from_cnt\n","groupby_col                                           \n","2018-01-01 01  11th & M St NW  2018-01-01 01         1\n","2018-01-01 07  11th & M St NW  2018-01-01 07         1\n","2018-01-01 09  11th & M St NW  2018-01-01 09         1\n","2018-01-01 10  11th & M St NW  2018-01-01 10         1\n","2018-01-01 11  11th & M St NW  2018-01-01 11         4\n","...                       ...            ...       ...\n","2021-12-31 15   Thomas Circle  2021-12-31 15         3\n","2021-12-31 16   Thomas Circle  2021-12-31 16         1\n","2021-12-31 17   Thomas Circle  2021-12-31 17         2\n","2021-12-31 21   Thomas Circle  2021-12-31 21         1\n","2021-12-31 23   Thomas Circle  2021-12-31 23         3\n","\n","[431654 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-c1cdf472-680f-4140-b5e9-56ab29405ae1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Start station</th>\n","      <th>groupby_col</th>\n","      <th>from_cnt</th>\n","    </tr>\n","    <tr>\n","      <th>groupby_col</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01 01</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 01</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 07</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 07</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 09</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 09</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 10</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01 11</th>\n","      <td>11th &amp; M St NW</td>\n","      <td>2018-01-01 11</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 15</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 15</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 16</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 16</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 17</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 17</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 21</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 21</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31 23</th>\n","      <td>Thomas Circle</td>\n","      <td>2021-12-31 23</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>431654 rows √ó 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1cdf472-680f-4140-b5e9-56ab29405ae1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c1cdf472-680f-4140-b5e9-56ab29405ae1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c1cdf472-680f-4140-b5e9-56ab29405ae1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["#Êäästarted time Ë®≠ÁÇ∫ index\n","start_st.set_index('started_at', inplace = True)\n","\n","#Ê†πÊìöÊôÇÈñì(Â∞èÊôÇÁÇ∫ÂñÆ‰Ωç)‰æÜÂàÜÁæ§\n","start_st['groupby_col'] = start_st.index.map(lambda x:str(x)[:13])\n","# Ë®àÁÆóÂêÑÁ´ôÈªûÊØèÂ∞èÊôÇÂÄüËªäÈáè\n","start_st_model =pd.DataFrame(start_st.groupby(['Start station', 'groupby_col'])['hour'].count())\n","\n","# Rename the 'hour' to 'from_cnt'\n","# Make the 'grouby_col' the index\n","start_st_model.rename(columns={'hour':'from_cnt'}, inplace=True)\n","start_st_model.reset_index(inplace=True)\n","start_st_model.index = start_st_model['groupby_col']\n","# start_st_model = start_st_model.drop('groupby_col', axis=1)\n","\n","start_st_model\n","# ÁèæÂú®Ë≥áÊñôÁÇ∫Ë©≤ÊôÇÊÆµ Âì™‰∏ÄÁ´ôÈªû Ë¶ÅÂÄüÂπæÂè∞Ëªä(ÊòØÈúÄË¶ÅÈ†êÊ∏¨ÊôÇÁöÑË≥áÊñôËº∏ÂÖ•ÂûãÊÖã)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0J9duJQDeN4I"},"outputs":[],"source":["# functions def\n","\n","# ÁØ©Á´ôÈªûË≥áÊñô\n","def produce_picked_station_data(all_station_data, station_name):\n","  fliter = (all_station_data['Start station'] == station_name)\n","  picked_station_data = all_station_data[fliter]\n","  return picked_station_data \n","\n","\n","def feature_extractor0(data, time_data):\n","  data['groupby_col'] = pd.to_datetime(data['groupby_col'])\n","  data.drop('Start station', axis=1, inplace=True)\n","  data = data.rename(columns={\"groupby_col\":\"Time\"})\n","  #Â∞áÁõ∏ÂêåÊôÇÈñìÈñìÈöîÁöÑÊôÇÈñìË°®ËàáÈÄ≤Á´ôÈõ¢Á´ôË≥áË®äÂÅöÁµêÂêà\n","  data['Time'] = pd.to_datetime(data['Time'])\n","  data = pd.merge(time_data, data,on=['Time'],how='left')\n","  # NaNË£ú0\n","  data = data.fillna(0)\n","  # Â∞áTimeË®≠ÁÇ∫index\n","  data.index = data['Time']\n","  data['year'] = data.index.map(lambda x:str(x)[:4])  \n","  data['month'] = data.index.map(lambda x:str(x)[5:7])\n","  data['hour'] = data.index.map(lambda x:str(x)[11:13])\n","  data['day'] = data.index.day_name()\n","  data.drop('Time', axis=1, inplace=True)\n","  # print('data info')\n","  # print(data.info())\n","  # print('from_cnt data describe')\n","  # print(data['from_cnt'].describe())\n","  data.reset_index(inplace=True)\n","  data = data.drop(['Time', 'year'],axis=1)\n","  ## 'Start station', 'year', 'month', 'day', 'hour' columns to be converted to dummies\n","  data = pd.get_dummies(data=data, columns=['month', 'day', 'hour'])  \n","  # print('data check')\n","  # print(data)\n","  return data\n","\n","\n","def feature_extractor1(data, time_data):\n","\n","\n","  return data\n","\n","\n","def feature_engineering(data, time_data, index=0):\n","  if index == 0:\n","    featured_data = feature_extractor0(data, time_data)\n","  else:\n","    featured_data = feature_extractor1(data, time_data)\n","  return featured_data\n","\n","\n","def scaling(data, column_name='from_cnt'):\n","  ##ÈÄ≤Ë°åË≥áÊñôÊ®ôÊ∫ñÂåñ\n","  scaler = MaxAbsScaler()\n","  data[column_name] = scaler.fit_transform(data[column_name].values.reshape(-1,1))\n","  return data\n","\n","\n","def build_training_data(full_data, used_days):\n","  x_train = []   #È†êÊ∏¨ÈªûÁöÑÂâç 7 Â§©ÁöÑË≥áÊñô\n","  y_train = []   #È†êÊ∏¨Èªû\n","  Pasthours = 24 * used_days\n","  Futurehours = 1\n","  for i in range(full_data.shape[0]-Pasthours-Futurehours):  \n","    x_train.append(np.array(full_data.iloc[i:i+Pasthours]))\n","    y_train.append(np.array(full_data.iloc[i+Pasthours:i+Pasthours+Futurehours][\"from_cnt\"]))\n","  x_train, y_train = np.array(x_train), np.array(y_train)  # ËΩâÊàênumpy arrayÁöÑÊ†ºÂºèÔºå‰ª•Âà©Ëº∏ÂÖ•LSTM\n","  return x_train, y_train\n","\n","\n","def build_training_and_validation_data(x_train, y_train, rate):\n","  X_train = x_train[int(x_train.shape[0]*rate):]\n","  Y_train = y_train[int(y_train.shape[0]*rate):]\n","  X_val = x_train[:int(x_train.shape[0]*rate)]\n","  Y_val = y_train[:int(y_train.shape[0]*rate)]\n","  return X_train, Y_train, X_val, Y_val\n","\n","\n","# Êâì‰∫ÇË≥áÊñô\n","def shuffle(X,Y):\n","  np.random.seed(10)\n","  randomList = np.arange(X.shape[0])\n","  np.random.shuffle(randomList)\n","  return X[randomList], Y[randomList]\n","\n","\n","def buildManyToOneModel(shape):\n","  model = Sequential()\n","  model.add(LSTM(20, input_shape=(shape[1],shape[2]),return_sequences=True))\n","  model.add(LSTM(10, input_shape=(shape[1],shape[2]),return_sequences=False))\n","  model.add(Dropout(0.05))\n","  model.add(Dense(10))\n","  model.add(Dense(1))\n","  model.compile(loss=\"mse\", optimizer=\"Adam\", metrics=['accuracy', 'mse'])\n","  model.summary()\n","  return model"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":9078771,"status":"ok","timestamp":1652777322234,"user":{"displayName":"ÈΩãËó§È£õÈ≥•","userId":"04794182654464766810"},"user_tz":-480},"id":"s5PLSMxbbax-","outputId":"d11ce418-8ed7-4f23-9c1b-9b275738cf99"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["model building for  Columbus Circle / Union Station  start\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_4 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_5 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_2 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_4 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_5 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 72ms/step - loss: 0.0109 - accuracy: 0.3427 - mse: 0.0109 - val_loss: 0.0069 - val_accuracy: 0.3423 - val_mse: 0.0069\n","Epoch 2/20\n","280/280 [==============================] - 19s 67ms/step - loss: 0.0066 - accuracy: 0.3427 - mse: 0.0066 - val_loss: 0.0045 - val_accuracy: 0.3423 - val_mse: 0.0045\n","Epoch 3/20\n","280/280 [==============================] - 19s 67ms/step - loss: 0.0039 - accuracy: 0.3427 - mse: 0.0039 - val_loss: 0.0029 - val_accuracy: 0.3423 - val_mse: 0.0029\n","Epoch 4/20\n","280/280 [==============================] - 19s 67ms/step - loss: 0.0030 - accuracy: 0.3427 - mse: 0.0030 - val_loss: 0.0025 - val_accuracy: 0.3423 - val_mse: 0.0025\n","Epoch 5/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0027 - accuracy: 0.3427 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.3423 - val_mse: 0.0025\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0025 - accuracy: 0.3427 - mse: 0.0025 - val_loss: 0.0023 - val_accuracy: 0.3423 - val_mse: 0.0023\n","Epoch 7/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0024 - accuracy: 0.3427 - mse: 0.0024 - val_loss: 0.0022 - val_accuracy: 0.3423 - val_mse: 0.0022\n","Epoch 8/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0024 - accuracy: 0.3427 - mse: 0.0024 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 9/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.3427 - mse: 0.0023 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 10/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.3427 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.3423 - val_mse: 0.0023\n","Epoch 11/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0022 - accuracy: 0.3427 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 12/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0022 - accuracy: 0.3427 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 13/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 14/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.3423 - val_mse: 0.0020\n","Epoch 15/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 16/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.3423 - val_mse: 0.0020\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.3423 - val_mse: 0.0021\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.3423 - val_mse: 0.0020\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.3423 - val_mse: 0.0020\n","Epoch 20/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0021 - accuracy: 0.3427 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.3423 - val_mse: 0.0020\n","model building for  Columbus Circle / Union Station  done\n","model building for  Lincoln Memorial  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_6 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_7 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_3 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_6 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_7 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 72ms/step - loss: 0.0065 - accuracy: 0.4557 - mse: 0.0065 - val_loss: 0.0044 - val_accuracy: 0.4506 - val_mse: 0.0044\n","Epoch 2/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0042 - accuracy: 0.4557 - mse: 0.0042 - val_loss: 0.0035 - val_accuracy: 0.4506 - val_mse: 0.0035\n","Epoch 3/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0036 - accuracy: 0.4557 - mse: 0.0036 - val_loss: 0.0032 - val_accuracy: 0.4508 - val_mse: 0.0032\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0034 - accuracy: 0.4557 - mse: 0.0034 - val_loss: 0.0031 - val_accuracy: 0.4508 - val_mse: 0.0031\n","Epoch 5/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0032 - accuracy: 0.4557 - mse: 0.0032 - val_loss: 0.0031 - val_accuracy: 0.4508 - val_mse: 0.0031\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0032 - accuracy: 0.4557 - mse: 0.0032 - val_loss: 0.0031 - val_accuracy: 0.4508 - val_mse: 0.0031\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.4557 - mse: 0.0031 - val_loss: 0.0031 - val_accuracy: 0.4508 - val_mse: 0.0031\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.4557 - mse: 0.0031 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 9/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0031 - accuracy: 0.4557 - mse: 0.0031 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 10/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 11/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0032 - val_accuracy: 0.4508 - val_mse: 0.0032\n","Epoch 12/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0031 - val_accuracy: 0.4508 - val_mse: 0.0031\n","Epoch 13/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0029 - val_accuracy: 0.4508 - val_mse: 0.0029\n","Epoch 14/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 15/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0030 - accuracy: 0.4557 - mse: 0.0030 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 16/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0029 - accuracy: 0.4557 - mse: 0.0029 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 17/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0029 - accuracy: 0.4557 - mse: 0.0029 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0029 - accuracy: 0.4557 - mse: 0.0029 - val_loss: 0.0029 - val_accuracy: 0.4508 - val_mse: 0.0029\n","Epoch 19/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0029 - accuracy: 0.4557 - mse: 0.0029 - val_loss: 0.0029 - val_accuracy: 0.4508 - val_mse: 0.0029\n","Epoch 20/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0029 - accuracy: 0.4557 - mse: 0.0029 - val_loss: 0.0030 - val_accuracy: 0.4508 - val_mse: 0.0030\n","model building for  Lincoln Memorial  done\n","model building for  4th St & Madison Dr NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_8 (LSTM)               (None, 168, 20)           5200      \n","                                                                 \n"," lstm_9 (LSTM)               (None, 10)                1240      \n","                                                                 \n"," dropout_4 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_8 (Dense)             (None, 10)                110       \n","                                                                 \n"," dense_9 (Dense)             (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0048 - accuracy: 0.4767 - mse: 0.0048 - val_loss: 0.0033 - val_accuracy: 0.4753 - val_mse: 0.0033\n","Epoch 2/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0032 - accuracy: 0.4767 - mse: 0.0032 - val_loss: 0.0029 - val_accuracy: 0.4753 - val_mse: 0.0029\n","Epoch 3/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0028 - accuracy: 0.4767 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.4753 - val_mse: 0.0027\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0027 - accuracy: 0.4767 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.4753 - val_mse: 0.0025\n","Epoch 5/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0025 - accuracy: 0.4767 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4753 - val_mse: 0.0025\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0025 - accuracy: 0.4767 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4753 - val_mse: 0.0025\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0025 - accuracy: 0.4767 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.4753 - val_mse: 0.0025\n","Epoch 8/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0024 - accuracy: 0.4767 - mse: 0.0024 - val_loss: 0.0024 - val_accuracy: 0.4753 - val_mse: 0.0024\n","Epoch 9/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0024 - accuracy: 0.4767 - mse: 0.0024 - val_loss: 0.0024 - val_accuracy: 0.4753 - val_mse: 0.0024\n","Epoch 10/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0024 - accuracy: 0.4767 - mse: 0.0024 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 11/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 12/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 13/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 15/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 16/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0024 - val_accuracy: 0.4753 - val_mse: 0.0024\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.4767 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.4767 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.4753 - val_mse: 0.0023\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.4767 - mse: 0.0023 - val_loss: 0.0024 - val_accuracy: 0.4753 - val_mse: 0.0024\n","model building for  4th St & Madison Dr NW  done\n","model building for  Jefferson Dr & 14th St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_10 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_11 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_5 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_10 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_11 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0071 - accuracy: 0.4779 - mse: 0.0071 - val_loss: 0.0047 - val_accuracy: 0.4812 - val_mse: 0.0047\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.4779 - mse: 0.0044 - val_loss: 0.0041 - val_accuracy: 0.4812 - val_mse: 0.0041\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0040 - accuracy: 0.4779 - mse: 0.0040 - val_loss: 0.0040 - val_accuracy: 0.4812 - val_mse: 0.0040\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0038 - accuracy: 0.4779 - mse: 0.0038 - val_loss: 0.0036 - val_accuracy: 0.4812 - val_mse: 0.0036\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.4779 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.4812 - val_mse: 0.0037\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0035 - accuracy: 0.4779 - mse: 0.0035 - val_loss: 0.0035 - val_accuracy: 0.4812 - val_mse: 0.0035\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0035 - accuracy: 0.4779 - mse: 0.0035 - val_loss: 0.0034 - val_accuracy: 0.4812 - val_mse: 0.0034\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0034 - accuracy: 0.4779 - mse: 0.0034 - val_loss: 0.0035 - val_accuracy: 0.4812 - val_mse: 0.0035\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0034 - accuracy: 0.4779 - mse: 0.0034 - val_loss: 0.0034 - val_accuracy: 0.4812 - val_mse: 0.0034\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0034 - accuracy: 0.4779 - mse: 0.0034 - val_loss: 0.0034 - val_accuracy: 0.4812 - val_mse: 0.0034\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0033 - accuracy: 0.4779 - mse: 0.0033 - val_loss: 0.0034 - val_accuracy: 0.4812 - val_mse: 0.0034\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0034 - accuracy: 0.4779 - mse: 0.0034 - val_loss: 0.0033 - val_accuracy: 0.4812 - val_mse: 0.0033\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0033 - accuracy: 0.4779 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.4812 - val_mse: 0.0033\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0033 - accuracy: 0.4779 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.4812 - val_mse: 0.0033\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0033 - accuracy: 0.4779 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.4812 - val_mse: 0.0033\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0033 - accuracy: 0.4779 - mse: 0.0033 - val_loss: 0.0033 - val_accuracy: 0.4812 - val_mse: 0.0033\n","Epoch 17/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0032 - accuracy: 0.4779 - mse: 0.0032 - val_loss: 0.0032 - val_accuracy: 0.4812 - val_mse: 0.0032\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0032 - accuracy: 0.4779 - mse: 0.0032 - val_loss: 0.0032 - val_accuracy: 0.4812 - val_mse: 0.0032\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0032 - accuracy: 0.4779 - mse: 0.0032 - val_loss: 0.0032 - val_accuracy: 0.4812 - val_mse: 0.0032\n","Epoch 20/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0032 - accuracy: 0.4779 - mse: 0.0032 - val_loss: 0.0032 - val_accuracy: 0.4812 - val_mse: 0.0032\n","model building for  Jefferson Dr & 14th St SW  done\n","model building for  15th & P St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_12 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_13 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_6 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_12 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_13 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 74ms/step - loss: 0.0111 - accuracy: 0.2797 - mse: 0.0111 - val_loss: 0.0081 - val_accuracy: 0.2765 - val_mse: 0.0081\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0080 - accuracy: 0.2797 - mse: 0.0080 - val_loss: 0.0067 - val_accuracy: 0.2765 - val_mse: 0.0067\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0067 - accuracy: 0.2797 - mse: 0.0067 - val_loss: 0.0059 - val_accuracy: 0.2765 - val_mse: 0.0059\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0061 - accuracy: 0.2797 - mse: 0.0061 - val_loss: 0.0055 - val_accuracy: 0.2765 - val_mse: 0.0055\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.2797 - mse: 0.0056 - val_loss: 0.0052 - val_accuracy: 0.2765 - val_mse: 0.0052\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0055 - accuracy: 0.2797 - mse: 0.0055 - val_loss: 0.0052 - val_accuracy: 0.2765 - val_mse: 0.0052\n","Epoch 7/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0054 - accuracy: 0.2797 - mse: 0.0054 - val_loss: 0.0054 - val_accuracy: 0.2765 - val_mse: 0.0054\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0053 - accuracy: 0.2797 - mse: 0.0053 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0053 - accuracy: 0.2797 - mse: 0.0053 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.2797 - mse: 0.0052 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.2797 - mse: 0.0052 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.2797 - mse: 0.0052 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.2797 - mse: 0.0052 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0053 - val_accuracy: 0.2765 - val_mse: 0.0053\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0052 - val_accuracy: 0.2765 - val_mse: 0.0052\n","Epoch 16/20\n","280/280 [==============================] - 20s 73ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0050 - val_accuracy: 0.2765 - val_mse: 0.0050\n","Epoch 17/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0050 - val_accuracy: 0.2765 - val_mse: 0.0050\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0050 - val_accuracy: 0.2765 - val_mse: 0.0050\n","Epoch 19/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.2797 - mse: 0.0051 - val_loss: 0.0051 - val_accuracy: 0.2765 - val_mse: 0.0051\n","model building for  15th & P St NW  done\n","model building for  New Hampshire Ave & T St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_14 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_15 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_7 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_14 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_15 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0101 - accuracy: 0.2663 - mse: 0.0101 - val_loss: 0.0079 - val_accuracy: 0.2712 - val_mse: 0.0079\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0075 - accuracy: 0.2663 - mse: 0.0075 - val_loss: 0.0067 - val_accuracy: 0.2712 - val_mse: 0.0067\n","Epoch 3/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0067 - accuracy: 0.2663 - mse: 0.0067 - val_loss: 0.0065 - val_accuracy: 0.2712 - val_mse: 0.0065\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0065 - accuracy: 0.2663 - mse: 0.0065 - val_loss: 0.0062 - val_accuracy: 0.2712 - val_mse: 0.0062\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0064 - accuracy: 0.2663 - mse: 0.0064 - val_loss: 0.0061 - val_accuracy: 0.2712 - val_mse: 0.0061\n","Epoch 6/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0063 - accuracy: 0.2663 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.2712 - val_mse: 0.0060\n","Epoch 7/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0061 - accuracy: 0.2663 - mse: 0.0061 - val_loss: 0.0058 - val_accuracy: 0.2712 - val_mse: 0.0058\n","Epoch 8/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0060 - accuracy: 0.2663 - mse: 0.0060 - val_loss: 0.0057 - val_accuracy: 0.2712 - val_mse: 0.0057\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0059 - accuracy: 0.2663 - mse: 0.0059 - val_loss: 0.0057 - val_accuracy: 0.2712 - val_mse: 0.0057\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0059 - accuracy: 0.2663 - mse: 0.0059 - val_loss: 0.0057 - val_accuracy: 0.2712 - val_mse: 0.0057\n","Epoch 11/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0058 - accuracy: 0.2663 - mse: 0.0058 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 12/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0057 - accuracy: 0.2663 - mse: 0.0057 - val_loss: 0.0057 - val_accuracy: 0.2712 - val_mse: 0.0057\n","Epoch 13/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0057 - accuracy: 0.2663 - mse: 0.0057 - val_loss: 0.0057 - val_accuracy: 0.2712 - val_mse: 0.0057\n","Epoch 14/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0057 - accuracy: 0.2663 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0057 - accuracy: 0.2663 - mse: 0.0057 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.2663 - mse: 0.0056 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.2663 - mse: 0.0056 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.2663 - mse: 0.0056 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0055 - accuracy: 0.2663 - mse: 0.0055 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0055 - accuracy: 0.2663 - mse: 0.0055 - val_loss: 0.0056 - val_accuracy: 0.2712 - val_mse: 0.0056\n","model building for  New Hampshire Ave & T St NW  done\n","model building for  Henry Bacon Dr & Lincoln Memorial Circle NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_8\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_16 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_17 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_8 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_16 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_17 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 72ms/step - loss: 0.0070 - accuracy: 0.4840 - mse: 0.0070 - val_loss: 0.0052 - val_accuracy: 0.4793 - val_mse: 0.0052\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0049 - accuracy: 0.4840 - mse: 0.0049 - val_loss: 0.0045 - val_accuracy: 0.4794 - val_mse: 0.0045\n","Epoch 3/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0045 - accuracy: 0.4840 - mse: 0.0045 - val_loss: 0.0042 - val_accuracy: 0.4794 - val_mse: 0.0042\n","Epoch 4/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0043 - accuracy: 0.4840 - mse: 0.0043 - val_loss: 0.0040 - val_accuracy: 0.4794 - val_mse: 0.0040\n","Epoch 5/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0041 - accuracy: 0.4840 - mse: 0.0041 - val_loss: 0.0040 - val_accuracy: 0.4794 - val_mse: 0.0040\n","Epoch 6/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0041 - accuracy: 0.4840 - mse: 0.0041 - val_loss: 0.0039 - val_accuracy: 0.4794 - val_mse: 0.0039\n","Epoch 7/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0040 - accuracy: 0.4840 - mse: 0.0040 - val_loss: 0.0039 - val_accuracy: 0.4794 - val_mse: 0.0039\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0040 - accuracy: 0.4840 - mse: 0.0040 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 9/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0040 - accuracy: 0.4840 - mse: 0.0040 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 10/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.4840 - mse: 0.0039 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 11/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.4840 - mse: 0.0039 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0039 - accuracy: 0.4840 - mse: 0.0039 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 13/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.4840 - mse: 0.0039 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 14/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 15/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 16/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","Epoch 17/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.4840 - mse: 0.0037 - val_loss: 0.0037 - val_accuracy: 0.4794 - val_mse: 0.0037\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.4840 - mse: 0.0038 - val_loss: 0.0038 - val_accuracy: 0.4794 - val_mse: 0.0038\n","model building for  Henry Bacon Dr & Lincoln Memorial Circle NW  done\n","model building for  1st & M St NE  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_18 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_19 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_9 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_18 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_19 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 74ms/step - loss: 0.0118 - accuracy: 0.3153 - mse: 0.0118 - val_loss: 0.0076 - val_accuracy: 0.3225 - val_mse: 0.0076\n","Epoch 2/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0076 - accuracy: 0.3153 - mse: 0.0076 - val_loss: 0.0066 - val_accuracy: 0.3225 - val_mse: 0.0066\n","Epoch 3/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0065 - accuracy: 0.3153 - mse: 0.0065 - val_loss: 0.0059 - val_accuracy: 0.3225 - val_mse: 0.0059\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0059 - accuracy: 0.3153 - mse: 0.0059 - val_loss: 0.0058 - val_accuracy: 0.3225 - val_mse: 0.0058\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.3153 - mse: 0.0056 - val_loss: 0.0055 - val_accuracy: 0.3225 - val_mse: 0.0055\n","Epoch 6/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0054 - accuracy: 0.3153 - mse: 0.0054 - val_loss: 0.0053 - val_accuracy: 0.3225 - val_mse: 0.0053\n","Epoch 7/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0053 - accuracy: 0.3153 - mse: 0.0053 - val_loss: 0.0053 - val_accuracy: 0.3225 - val_mse: 0.0053\n","Epoch 8/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0052 - accuracy: 0.3153 - mse: 0.0052 - val_loss: 0.0053 - val_accuracy: 0.3225 - val_mse: 0.0053\n","Epoch 9/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0051 - accuracy: 0.3153 - mse: 0.0051 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3153 - mse: 0.0051 - val_loss: 0.0053 - val_accuracy: 0.3225 - val_mse: 0.0053\n","Epoch 11/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0051 - accuracy: 0.3153 - mse: 0.0051 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0050 - accuracy: 0.3153 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0050 - accuracy: 0.3153 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0050 - accuracy: 0.3153 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0050 - accuracy: 0.3153 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 16/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0049 - accuracy: 0.3153 - mse: 0.0049 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 17/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0049 - accuracy: 0.3153 - mse: 0.0049 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0049 - accuracy: 0.3153 - mse: 0.0049 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","Epoch 19/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0049 - accuracy: 0.3153 - mse: 0.0049 - val_loss: 0.0053 - val_accuracy: 0.3225 - val_mse: 0.0053\n","Epoch 20/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0048 - accuracy: 0.3153 - mse: 0.0048 - val_loss: 0.0052 - val_accuracy: 0.3225 - val_mse: 0.0052\n","model building for  1st & M St NE  done\n","model building for  Smithsonian-National Mall / Jefferson Dr & 12th St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_20 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_21 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_10 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_20 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_21 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 75ms/step - loss: 0.0061 - accuracy: 0.5045 - mse: 0.0061 - val_loss: 0.0040 - val_accuracy: 0.5167 - val_mse: 0.0040\n","Epoch 2/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.5045 - mse: 0.0039 - val_loss: 0.0034 - val_accuracy: 0.5167 - val_mse: 0.0034\n","Epoch 3/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0034 - accuracy: 0.5045 - mse: 0.0034 - val_loss: 0.0032 - val_accuracy: 0.5167 - val_mse: 0.0032\n","Epoch 4/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0031 - accuracy: 0.5046 - mse: 0.0031 - val_loss: 0.0028 - val_accuracy: 0.5167 - val_mse: 0.0028\n","Epoch 5/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0030 - accuracy: 0.5045 - mse: 0.0030 - val_loss: 0.0028 - val_accuracy: 0.5167 - val_mse: 0.0028\n","Epoch 6/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0028 - accuracy: 0.5045 - mse: 0.0028 - val_loss: 0.0029 - val_accuracy: 0.5167 - val_mse: 0.0029\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5045 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5046 - mse: 0.0028 - val_loss: 0.0030 - val_accuracy: 0.5167 - val_mse: 0.0030\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5045 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 10/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0028 - accuracy: 0.5045 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 11/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.5045 - mse: 0.0027 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 12/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0027 - accuracy: 0.5046 - mse: 0.0027 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 13/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0027 - accuracy: 0.5045 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.5167 - val_mse: 0.0026\n","Epoch 14/20\n","280/280 [==============================] - 20s 73ms/step - loss: 0.0027 - accuracy: 0.5045 - mse: 0.0027 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 15/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.5046 - mse: 0.0027 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 16/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.5045 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.5167 - val_mse: 0.0026\n","Epoch 17/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0026 - accuracy: 0.5046 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.5167 - val_mse: 0.0026\n","Epoch 18/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0026 - accuracy: 0.5046 - mse: 0.0026 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","Epoch 19/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0026 - accuracy: 0.5046 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.5167 - val_mse: 0.0026\n","Epoch 20/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0026 - accuracy: 0.5046 - mse: 0.0026 - val_loss: 0.0027 - val_accuracy: 0.5167 - val_mse: 0.0027\n","model building for  Smithsonian-National Mall / Jefferson Dr & 12th St SW  done\n","model building for  Massachusetts Ave & Dupont Circle NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_11\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_22 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_23 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_11 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_22 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_23 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 74ms/step - loss: 0.0066 - accuracy: 0.3583 - mse: 0.0066 - val_loss: 0.0043 - val_accuracy: 0.3475 - val_mse: 0.0043\n","Epoch 2/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0043 - accuracy: 0.3584 - mse: 0.0043 - val_loss: 0.0037 - val_accuracy: 0.3475 - val_mse: 0.0037\n","Epoch 3/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0038 - accuracy: 0.3584 - mse: 0.0038 - val_loss: 0.0033 - val_accuracy: 0.3475 - val_mse: 0.0033\n","Epoch 4/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0034 - accuracy: 0.3584 - mse: 0.0034 - val_loss: 0.0031 - val_accuracy: 0.3475 - val_mse: 0.0031\n","Epoch 5/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0033 - accuracy: 0.3584 - mse: 0.0033 - val_loss: 0.0030 - val_accuracy: 0.3475 - val_mse: 0.0030\n","Epoch 6/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0031 - accuracy: 0.3584 - mse: 0.0031 - val_loss: 0.0028 - val_accuracy: 0.3475 - val_mse: 0.0028\n","Epoch 7/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0029 - accuracy: 0.3584 - mse: 0.0029 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 8/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0028 - accuracy: 0.3584 - mse: 0.0028 - val_loss: 0.0027 - val_accuracy: 0.3475 - val_mse: 0.0027\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0027 - accuracy: 0.3584 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 10/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0027 - accuracy: 0.3584 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 11/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.3584 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.3475 - val_mse: 0.0025\n","Epoch 12/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.3584 - mse: 0.0027 - val_loss: 0.0025 - val_accuracy: 0.3475 - val_mse: 0.0025\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0027 - accuracy: 0.3584 - mse: 0.0027 - val_loss: 0.0027 - val_accuracy: 0.3475 - val_mse: 0.0027\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.3475 - val_mse: 0.0025\n","Epoch 15/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.3475 - val_mse: 0.0025\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.3475 - val_mse: 0.0026\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0026 - accuracy: 0.3584 - mse: 0.0026 - val_loss: 0.0025 - val_accuracy: 0.3475 - val_mse: 0.0025\n","model building for  Massachusetts Ave & Dupont Circle NW  done\n","model building for  14th & Irving St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_12\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_24 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_25 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_12 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_24 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_25 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0086 - accuracy: 0.3265 - mse: 0.0086 - val_loss: 0.0052 - val_accuracy: 0.3237 - val_mse: 0.0052\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0055 - accuracy: 0.3266 - mse: 0.0055 - val_loss: 0.0048 - val_accuracy: 0.3237 - val_mse: 0.0048\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3266 - mse: 0.0051 - val_loss: 0.0046 - val_accuracy: 0.3237 - val_mse: 0.0046\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0049 - accuracy: 0.3266 - mse: 0.0049 - val_loss: 0.0044 - val_accuracy: 0.3237 - val_mse: 0.0044\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0046 - accuracy: 0.3266 - mse: 0.0046 - val_loss: 0.0041 - val_accuracy: 0.3237 - val_mse: 0.0041\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0043 - accuracy: 0.3266 - mse: 0.0043 - val_loss: 0.0038 - val_accuracy: 0.3237 - val_mse: 0.0038\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0041 - accuracy: 0.3266 - mse: 0.0041 - val_loss: 0.0037 - val_accuracy: 0.3237 - val_mse: 0.0037\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0039 - accuracy: 0.3266 - mse: 0.0039 - val_loss: 0.0037 - val_accuracy: 0.3237 - val_mse: 0.0037\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3266 - mse: 0.0038 - val_loss: 0.0036 - val_accuracy: 0.3237 - val_mse: 0.0036\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3266 - mse: 0.0038 - val_loss: 0.0037 - val_accuracy: 0.3237 - val_mse: 0.0037\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3266 - mse: 0.0038 - val_loss: 0.0036 - val_accuracy: 0.3237 - val_mse: 0.0036\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3266 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3266 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3266 - mse: 0.0037 - val_loss: 0.0037 - val_accuracy: 0.3237 - val_mse: 0.0037\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3266 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3266 - mse: 0.0037 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3266 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0036 - accuracy: 0.3266 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","Epoch 19/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0036 - accuracy: 0.3266 - mse: 0.0036 - val_loss: 0.0036 - val_accuracy: 0.3237 - val_mse: 0.0036\n","Epoch 20/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0036 - accuracy: 0.3266 - mse: 0.0036 - val_loss: 0.0035 - val_accuracy: 0.3237 - val_mse: 0.0035\n","model building for  14th & Irving St NW  done\n","model building for  Thomas Circle  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_13\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_26 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_27 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_13 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_26 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_27 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 73ms/step - loss: 0.0050 - accuracy: 0.3143 - mse: 0.0050 - val_loss: 0.0035 - val_accuracy: 0.3149 - val_mse: 0.0035\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0034 - accuracy: 0.3143 - mse: 0.0034 - val_loss: 0.0033 - val_accuracy: 0.3149 - val_mse: 0.0033\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.3143 - mse: 0.0031 - val_loss: 0.0029 - val_accuracy: 0.3149 - val_mse: 0.0029\n","Epoch 4/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0029 - accuracy: 0.3143 - mse: 0.0029 - val_loss: 0.0028 - val_accuracy: 0.3149 - val_mse: 0.0028\n","Epoch 5/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0027 - accuracy: 0.3143 - mse: 0.0027 - val_loss: 0.0026 - val_accuracy: 0.3149 - val_mse: 0.0026\n","Epoch 6/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0026 - accuracy: 0.3143 - mse: 0.0026 - val_loss: 0.0026 - val_accuracy: 0.3149 - val_mse: 0.0026\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0025 - accuracy: 0.3143 - mse: 0.0025 - val_loss: 0.0025 - val_accuracy: 0.3149 - val_mse: 0.0025\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0024 - accuracy: 0.3143 - mse: 0.0024 - val_loss: 0.0025 - val_accuracy: 0.3149 - val_mse: 0.0025\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.3143 - mse: 0.0023 - val_loss: 0.0024 - val_accuracy: 0.3149 - val_mse: 0.0024\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.3143 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.3143 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 12/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0023 - accuracy: 0.3143 - mse: 0.0023 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0024 - val_accuracy: 0.3149 - val_mse: 0.0024\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 18/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 19/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0023 - val_accuracy: 0.3149 - val_mse: 0.0023\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0022 - accuracy: 0.3143 - mse: 0.0022 - val_loss: 0.0022 - val_accuracy: 0.3149 - val_mse: 0.0022\n","model building for  Thomas Circle  done\n","model building for  Jefferson Memorial  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_14\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_28 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_29 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_14 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_28 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_29 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 75ms/step - loss: 0.0043 - accuracy: 0.5156 - mse: 0.0043 - val_loss: 0.0033 - val_accuracy: 0.5153 - val_mse: 0.0033\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.5156 - mse: 0.0031 - val_loss: 0.0027 - val_accuracy: 0.5153 - val_mse: 0.0027\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0027 - accuracy: 0.5157 - mse: 0.0027 - val_loss: 0.0024 - val_accuracy: 0.5154 - val_mse: 0.0024\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0025 - accuracy: 0.5157 - mse: 0.0025 - val_loss: 0.0024 - val_accuracy: 0.5154 - val_mse: 0.0024\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0024 - accuracy: 0.5157 - mse: 0.0024 - val_loss: 0.0022 - val_accuracy: 0.5154 - val_mse: 0.0022\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0023 - accuracy: 0.5157 - mse: 0.0023 - val_loss: 0.0022 - val_accuracy: 0.5154 - val_mse: 0.0022\n","Epoch 7/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0023 - accuracy: 0.5157 - mse: 0.0023 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 8/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0023 - accuracy: 0.5157 - mse: 0.0023 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 9/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0022 - accuracy: 0.5157 - mse: 0.0022 - val_loss: 0.0022 - val_accuracy: 0.5154 - val_mse: 0.0022\n","Epoch 10/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0022 - accuracy: 0.5157 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 11/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0022 - accuracy: 0.5157 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 12/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0022 - accuracy: 0.5157 - mse: 0.0022 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 13/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 15/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 16/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 17/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0021 - accuracy: 0.5156 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 18/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 19/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0021 - val_accuracy: 0.5154 - val_mse: 0.0021\n","Epoch 20/20\n","280/280 [==============================] - 20s 71ms/step - loss: 0.0021 - accuracy: 0.5157 - mse: 0.0021 - val_loss: 0.0020 - val_accuracy: 0.5154 - val_mse: 0.0020\n","model building for  Jefferson Memorial  done\n","model building for  14th & V St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_15\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_30 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_31 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_15 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_30 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_31 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 72ms/step - loss: 0.0103 - accuracy: 0.3142 - mse: 0.0103 - val_loss: 0.0081 - val_accuracy: 0.3170 - val_mse: 0.0081\n","Epoch 2/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0080 - accuracy: 0.3142 - mse: 0.0080 - val_loss: 0.0073 - val_accuracy: 0.3170 - val_mse: 0.0073\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0070 - accuracy: 0.3142 - mse: 0.0070 - val_loss: 0.0064 - val_accuracy: 0.3170 - val_mse: 0.0064\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0065 - accuracy: 0.3142 - mse: 0.0065 - val_loss: 0.0061 - val_accuracy: 0.3170 - val_mse: 0.0061\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0062 - accuracy: 0.3142 - mse: 0.0062 - val_loss: 0.0059 - val_accuracy: 0.3170 - val_mse: 0.0059\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0060 - accuracy: 0.3142 - mse: 0.0060 - val_loss: 0.0057 - val_accuracy: 0.3170 - val_mse: 0.0057\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.3142 - mse: 0.0056 - val_loss: 0.0056 - val_accuracy: 0.3170 - val_mse: 0.0056\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0056 - accuracy: 0.3142 - mse: 0.0056 - val_loss: 0.0053 - val_accuracy: 0.3170 - val_mse: 0.0053\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0054 - accuracy: 0.3142 - mse: 0.0054 - val_loss: 0.0053 - val_accuracy: 0.3170 - val_mse: 0.0053\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0054 - accuracy: 0.3142 - mse: 0.0054 - val_loss: 0.0054 - val_accuracy: 0.3170 - val_mse: 0.0054\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0053 - accuracy: 0.3142 - mse: 0.0053 - val_loss: 0.0052 - val_accuracy: 0.3170 - val_mse: 0.0052\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0053 - accuracy: 0.3142 - mse: 0.0053 - val_loss: 0.0052 - val_accuracy: 0.3170 - val_mse: 0.0052\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.3142 - mse: 0.0052 - val_loss: 0.0051 - val_accuracy: 0.3170 - val_mse: 0.0051\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.3142 - mse: 0.0052 - val_loss: 0.0053 - val_accuracy: 0.3170 - val_mse: 0.0053\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0052 - accuracy: 0.3142 - mse: 0.0052 - val_loss: 0.0052 - val_accuracy: 0.3170 - val_mse: 0.0052\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3142 - mse: 0.0051 - val_loss: 0.0051 - val_accuracy: 0.3170 - val_mse: 0.0051\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3142 - mse: 0.0051 - val_loss: 0.0051 - val_accuracy: 0.3170 - val_mse: 0.0051\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3142 - mse: 0.0051 - val_loss: 0.0051 - val_accuracy: 0.3170 - val_mse: 0.0051\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3142 - mse: 0.0051 - val_loss: 0.0052 - val_accuracy: 0.3170 - val_mse: 0.0052\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0051 - accuracy: 0.3142 - mse: 0.0051 - val_loss: 0.0050 - val_accuracy: 0.3170 - val_mse: 0.0050\n","model building for  14th & V St NW  done\n","model building for  11th & M St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_32 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_33 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_16 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_32 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_33 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0096 - accuracy: 0.2873 - mse: 0.0096 - val_loss: 0.0067 - val_accuracy: 0.2877 - val_mse: 0.0067\n","Epoch 2/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0071 - accuracy: 0.2873 - mse: 0.0071 - val_loss: 0.0064 - val_accuracy: 0.2877 - val_mse: 0.0064\n","Epoch 3/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0066 - accuracy: 0.2873 - mse: 0.0066 - val_loss: 0.0060 - val_accuracy: 0.2877 - val_mse: 0.0060\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0064 - accuracy: 0.2873 - mse: 0.0064 - val_loss: 0.0058 - val_accuracy: 0.2877 - val_mse: 0.0058\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0062 - accuracy: 0.2873 - mse: 0.0062 - val_loss: 0.0057 - val_accuracy: 0.2877 - val_mse: 0.0057\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0062 - accuracy: 0.2873 - mse: 0.0062 - val_loss: 0.0057 - val_accuracy: 0.2877 - val_mse: 0.0057\n","Epoch 7/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0061 - accuracy: 0.2873 - mse: 0.0061 - val_loss: 0.0057 - val_accuracy: 0.2877 - val_mse: 0.0057\n","Epoch 8/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0060 - accuracy: 0.2873 - mse: 0.0060 - val_loss: 0.0056 - val_accuracy: 0.2877 - val_mse: 0.0056\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0060 - accuracy: 0.2873 - mse: 0.0060 - val_loss: 0.0056 - val_accuracy: 0.2877 - val_mse: 0.0056\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0060 - accuracy: 0.2873 - mse: 0.0060 - val_loss: 0.0056 - val_accuracy: 0.2877 - val_mse: 0.0056\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0060 - accuracy: 0.2873 - mse: 0.0060 - val_loss: 0.0055 - val_accuracy: 0.2877 - val_mse: 0.0055\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0059 - accuracy: 0.2873 - mse: 0.0059 - val_loss: 0.0056 - val_accuracy: 0.2877 - val_mse: 0.0056\n","Epoch 13/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0059 - accuracy: 0.2873 - mse: 0.0059 - val_loss: 0.0055 - val_accuracy: 0.2877 - val_mse: 0.0055\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0056 - val_accuracy: 0.2877 - val_mse: 0.0056\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0055 - val_accuracy: 0.2877 - val_mse: 0.0055\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0055 - val_accuracy: 0.2877 - val_mse: 0.0055\n","Epoch 17/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0055 - val_accuracy: 0.2877 - val_mse: 0.0055\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0054 - val_accuracy: 0.2877 - val_mse: 0.0054\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0058 - accuracy: 0.2873 - mse: 0.0058 - val_loss: 0.0054 - val_accuracy: 0.2877 - val_mse: 0.0054\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0057 - accuracy: 0.2873 - mse: 0.0057 - val_loss: 0.0054 - val_accuracy: 0.2877 - val_mse: 0.0054\n","model building for  11th & M St NW  done\n","model building for  8th & O St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_17\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_34 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_35 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_17 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_34 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_35 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 72ms/step - loss: 0.0137 - accuracy: 0.3359 - mse: 0.0137 - val_loss: 0.0112 - val_accuracy: 0.3425 - val_mse: 0.0112\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0111 - accuracy: 0.3359 - mse: 0.0111 - val_loss: 0.0099 - val_accuracy: 0.3425 - val_mse: 0.0099\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0100 - accuracy: 0.3359 - mse: 0.0100 - val_loss: 0.0094 - val_accuracy: 0.3425 - val_mse: 0.0094\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0095 - accuracy: 0.3359 - mse: 0.0095 - val_loss: 0.0092 - val_accuracy: 0.3425 - val_mse: 0.0092\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0091 - accuracy: 0.3359 - mse: 0.0091 - val_loss: 0.0088 - val_accuracy: 0.3425 - val_mse: 0.0088\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0089 - accuracy: 0.3359 - mse: 0.0089 - val_loss: 0.0086 - val_accuracy: 0.3425 - val_mse: 0.0086\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0087 - accuracy: 0.3359 - mse: 0.0087 - val_loss: 0.0084 - val_accuracy: 0.3425 - val_mse: 0.0084\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0086 - accuracy: 0.3359 - mse: 0.0086 - val_loss: 0.0083 - val_accuracy: 0.3425 - val_mse: 0.0083\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0084 - accuracy: 0.3359 - mse: 0.0084 - val_loss: 0.0083 - val_accuracy: 0.3425 - val_mse: 0.0083\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0084 - accuracy: 0.3359 - mse: 0.0084 - val_loss: 0.0082 - val_accuracy: 0.3425 - val_mse: 0.0082\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0083 - accuracy: 0.3359 - mse: 0.0083 - val_loss: 0.0082 - val_accuracy: 0.3425 - val_mse: 0.0082\n","Epoch 12/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0082 - accuracy: 0.3359 - mse: 0.0082 - val_loss: 0.0083 - val_accuracy: 0.3425 - val_mse: 0.0083\n","Epoch 13/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0082 - accuracy: 0.3359 - mse: 0.0082 - val_loss: 0.0082 - val_accuracy: 0.3425 - val_mse: 0.0082\n","Epoch 14/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0081 - accuracy: 0.3359 - mse: 0.0081 - val_loss: 0.0081 - val_accuracy: 0.3425 - val_mse: 0.0081\n","Epoch 15/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0081 - accuracy: 0.3359 - mse: 0.0081 - val_loss: 0.0080 - val_accuracy: 0.3425 - val_mse: 0.0080\n","Epoch 16/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0081 - accuracy: 0.3359 - mse: 0.0081 - val_loss: 0.0081 - val_accuracy: 0.3425 - val_mse: 0.0081\n","Epoch 17/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0080 - accuracy: 0.3359 - mse: 0.0080 - val_loss: 0.0082 - val_accuracy: 0.3425 - val_mse: 0.0082\n","Epoch 18/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0080 - accuracy: 0.3359 - mse: 0.0080 - val_loss: 0.0080 - val_accuracy: 0.3425 - val_mse: 0.0080\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0079 - accuracy: 0.3359 - mse: 0.0079 - val_loss: 0.0080 - val_accuracy: 0.3425 - val_mse: 0.0080\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0079 - accuracy: 0.3359 - mse: 0.0079 - val_loss: 0.0080 - val_accuracy: 0.3425 - val_mse: 0.0080\n","model building for  8th & O St NW  done\n","model building for  5th & K St NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_18\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_36 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_37 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_18 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_36 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_37 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 74ms/step - loss: 0.0108 - accuracy: 0.3566 - mse: 0.0108 - val_loss: 0.0087 - val_accuracy: 0.3723 - val_mse: 0.0087\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0082 - accuracy: 0.3566 - mse: 0.0082 - val_loss: 0.0071 - val_accuracy: 0.3723 - val_mse: 0.0071\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0074 - accuracy: 0.3566 - mse: 0.0074 - val_loss: 0.0066 - val_accuracy: 0.3723 - val_mse: 0.0066\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0070 - accuracy: 0.3566 - mse: 0.0070 - val_loss: 0.0064 - val_accuracy: 0.3723 - val_mse: 0.0064\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0067 - accuracy: 0.3566 - mse: 0.0067 - val_loss: 0.0063 - val_accuracy: 0.3723 - val_mse: 0.0063\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0066 - accuracy: 0.3566 - mse: 0.0066 - val_loss: 0.0061 - val_accuracy: 0.3723 - val_mse: 0.0061\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0065 - accuracy: 0.3566 - mse: 0.0065 - val_loss: 0.0061 - val_accuracy: 0.3723 - val_mse: 0.0061\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0064 - accuracy: 0.3566 - mse: 0.0064 - val_loss: 0.0061 - val_accuracy: 0.3723 - val_mse: 0.0061\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0063 - accuracy: 0.3566 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0063 - accuracy: 0.3566 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0063 - accuracy: 0.3566 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0063 - accuracy: 0.3566 - mse: 0.0063 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 13/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0062 - accuracy: 0.3566 - mse: 0.0062 - val_loss: 0.0066 - val_accuracy: 0.3723 - val_mse: 0.0066\n","Epoch 14/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0062 - accuracy: 0.3566 - mse: 0.0062 - val_loss: 0.0059 - val_accuracy: 0.3723 - val_mse: 0.0059\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0062 - accuracy: 0.3566 - mse: 0.0062 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0061 - accuracy: 0.3566 - mse: 0.0061 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0062 - accuracy: 0.3566 - mse: 0.0062 - val_loss: 0.0062 - val_accuracy: 0.3723 - val_mse: 0.0062\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0061 - accuracy: 0.3566 - mse: 0.0061 - val_loss: 0.0059 - val_accuracy: 0.3723 - val_mse: 0.0059\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0061 - accuracy: 0.3566 - mse: 0.0061 - val_loss: 0.0060 - val_accuracy: 0.3723 - val_mse: 0.0060\n","Epoch 20/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0061 - accuracy: 0.3566 - mse: 0.0061 - val_loss: 0.0059 - val_accuracy: 0.3723 - val_mse: 0.0059\n","model building for  5th & K St NW  done\n","model building for  14th & Rhode Island Ave NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_19\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_38 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_39 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_19 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_38 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_39 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 24s 73ms/step - loss: 0.0078 - accuracy: 0.3154 - mse: 0.0078 - val_loss: 0.0064 - val_accuracy: 0.3155 - val_mse: 0.0064\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0060 - accuracy: 0.3154 - mse: 0.0060 - val_loss: 0.0059 - val_accuracy: 0.3155 - val_mse: 0.0059\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0054 - accuracy: 0.3154 - mse: 0.0054 - val_loss: 0.0054 - val_accuracy: 0.3155 - val_mse: 0.0054\n","Epoch 4/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0051 - accuracy: 0.3154 - mse: 0.0051 - val_loss: 0.0053 - val_accuracy: 0.3155 - val_mse: 0.0053\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0050 - accuracy: 0.3154 - mse: 0.0050 - val_loss: 0.0052 - val_accuracy: 0.3155 - val_mse: 0.0052\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0049 - accuracy: 0.3154 - mse: 0.0049 - val_loss: 0.0051 - val_accuracy: 0.3155 - val_mse: 0.0051\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0048 - accuracy: 0.3154 - mse: 0.0048 - val_loss: 0.0051 - val_accuracy: 0.3155 - val_mse: 0.0051\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0047 - accuracy: 0.3154 - mse: 0.0047 - val_loss: 0.0050 - val_accuracy: 0.3155 - val_mse: 0.0050\n","Epoch 9/20\n","280/280 [==============================] - 19s 68ms/step - loss: 0.0046 - accuracy: 0.3154 - mse: 0.0046 - val_loss: 0.0049 - val_accuracy: 0.3155 - val_mse: 0.0049\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0046 - accuracy: 0.3154 - mse: 0.0046 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0045 - accuracy: 0.3154 - mse: 0.0045 - val_loss: 0.0049 - val_accuracy: 0.3155 - val_mse: 0.0049\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0045 - accuracy: 0.3154 - mse: 0.0045 - val_loss: 0.0049 - val_accuracy: 0.3155 - val_mse: 0.0049\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0045 - accuracy: 0.3154 - mse: 0.0045 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0045 - accuracy: 0.3154 - mse: 0.0045 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.3154 - mse: 0.0044 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.3154 - mse: 0.0044 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0045 - accuracy: 0.3154 - mse: 0.0045 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.3154 - mse: 0.0044 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.3154 - mse: 0.0044 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","Epoch 20/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0044 - accuracy: 0.3154 - mse: 0.0044 - val_loss: 0.0048 - val_accuracy: 0.3155 - val_mse: 0.0048\n","model building for  14th & Rhode Island Ave NW  done\n","model building for  15th St & Constitution Ave NW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_20\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_40 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_41 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_20 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_40 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_41 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 74ms/step - loss: 0.0045 - accuracy: 0.5472 - mse: 0.0045 - val_loss: 0.0041 - val_accuracy: 0.5557 - val_mse: 0.0041\n","Epoch 2/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0035 - accuracy: 0.5472 - mse: 0.0035 - val_loss: 0.0036 - val_accuracy: 0.5557 - val_mse: 0.0036\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0032 - accuracy: 0.5472 - mse: 0.0032 - val_loss: 0.0034 - val_accuracy: 0.5557 - val_mse: 0.0034\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.5472 - mse: 0.0031 - val_loss: 0.0033 - val_accuracy: 0.5557 - val_mse: 0.0033\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0031 - accuracy: 0.5472 - mse: 0.0031 - val_loss: 0.0033 - val_accuracy: 0.5557 - val_mse: 0.0033\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0030 - accuracy: 0.5472 - mse: 0.0030 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 7/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0030 - accuracy: 0.5472 - mse: 0.0030 - val_loss: 0.0034 - val_accuracy: 0.5557 - val_mse: 0.0034\n","Epoch 8/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0030 - accuracy: 0.5472 - mse: 0.0030 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0030 - accuracy: 0.5472 - mse: 0.0030 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0029 - accuracy: 0.5472 - mse: 0.0029 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 11/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0029 - accuracy: 0.5472 - mse: 0.0029 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0029 - accuracy: 0.5472 - mse: 0.0029 - val_loss: 0.0031 - val_accuracy: 0.5557 - val_mse: 0.0031\n","Epoch 13/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0029 - accuracy: 0.5472 - mse: 0.0029 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0029 - accuracy: 0.5472 - mse: 0.0029 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 15/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0031 - val_accuracy: 0.5557 - val_mse: 0.0031\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0032 - val_accuracy: 0.5557 - val_mse: 0.0032\n","Epoch 20/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0028 - accuracy: 0.5472 - mse: 0.0028 - val_loss: 0.0031 - val_accuracy: 0.5557 - val_mse: 0.0031\n","model building for  15th St & Constitution Ave NW  done\n","model building for  4th & M St SW  start\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_21\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_42 (LSTM)              (None, 168, 20)           5200      \n","                                                                 \n"," lstm_43 (LSTM)              (None, 10)                1240      \n","                                                                 \n"," dropout_21 (Dropout)        (None, 10)                0         \n","                                                                 \n"," dense_42 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_43 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 6,561\n","Trainable params: 6,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","280/280 [==============================] - 25s 73ms/step - loss: 0.0058 - accuracy: 0.3879 - mse: 0.0058 - val_loss: 0.0049 - val_accuracy: 0.3854 - val_mse: 0.0049\n","Epoch 2/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0047 - accuracy: 0.3879 - mse: 0.0047 - val_loss: 0.0044 - val_accuracy: 0.3854 - val_mse: 0.0044\n","Epoch 3/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0042 - accuracy: 0.3879 - mse: 0.0042 - val_loss: 0.0042 - val_accuracy: 0.3854 - val_mse: 0.0042\n","Epoch 4/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0041 - accuracy: 0.3879 - mse: 0.0041 - val_loss: 0.0041 - val_accuracy: 0.3854 - val_mse: 0.0041\n","Epoch 5/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0040 - accuracy: 0.3879 - mse: 0.0040 - val_loss: 0.0041 - val_accuracy: 0.3854 - val_mse: 0.0041\n","Epoch 6/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0040 - accuracy: 0.3879 - mse: 0.0040 - val_loss: 0.0040 - val_accuracy: 0.3854 - val_mse: 0.0040\n","Epoch 7/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.3879 - mse: 0.0039 - val_loss: 0.0041 - val_accuracy: 0.3854 - val_mse: 0.0041\n","Epoch 8/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0039 - accuracy: 0.3879 - mse: 0.0039 - val_loss: 0.0040 - val_accuracy: 0.3854 - val_mse: 0.0040\n","Epoch 9/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3879 - mse: 0.0038 - val_loss: 0.0039 - val_accuracy: 0.3854 - val_mse: 0.0039\n","Epoch 10/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3879 - mse: 0.0038 - val_loss: 0.0039 - val_accuracy: 0.3854 - val_mse: 0.0039\n","Epoch 11/20\n","280/280 [==============================] - 19s 70ms/step - loss: 0.0038 - accuracy: 0.3879 - mse: 0.0038 - val_loss: 0.0039 - val_accuracy: 0.3854 - val_mse: 0.0039\n","Epoch 12/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0038 - accuracy: 0.3879 - mse: 0.0038 - val_loss: 0.0038 - val_accuracy: 0.3854 - val_mse: 0.0038\n","Epoch 13/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3879 - mse: 0.0037 - val_loss: 0.0038 - val_accuracy: 0.3854 - val_mse: 0.0038\n","Epoch 14/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0037 - accuracy: 0.3879 - mse: 0.0037 - val_loss: 0.0039 - val_accuracy: 0.3854 - val_mse: 0.0039\n","Epoch 15/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3879 - mse: 0.0036 - val_loss: 0.0038 - val_accuracy: 0.3854 - val_mse: 0.0038\n","Epoch 16/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3879 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.3854 - val_mse: 0.0037\n","Epoch 17/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3879 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.3854 - val_mse: 0.0037\n","Epoch 18/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3879 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.3854 - val_mse: 0.0037\n","Epoch 19/20\n","280/280 [==============================] - 19s 69ms/step - loss: 0.0036 - accuracy: 0.3879 - mse: 0.0036 - val_loss: 0.0037 - val_accuracy: 0.3854 - val_mse: 0.0037\n","Epoch 20/20\n","280/280 [==============================] - 20s 70ms/step - loss: 0.0035 - accuracy: 0.3879 - mse: 0.0035 - val_loss: 0.0038 - val_accuracy: 0.3854 - val_mse: 0.0038\n","model building for  4th & M St SW  done\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# ÁÇ∫ÊØèÂÄãÁ´ôÈªûÂª∫Ê®°\n","\n","# ÂâµÈÄ†Áõ∏ÂêåÊôÇÈñìÈñìÈöîÁöÑtime column\n","from datetime import datetime , timedelta\n","from pandas import DataFrame\n","all_time = []\n","start_time = datetime.strptime(\"2018-01-01 00:00:00\" , \"%Y-%m-%d %H:%M:%S\")    \n","end_time = datetime.strptime(\"2021-12-31 23:00:00\" , \"%Y-%m-%d %H:%M:%S\")    \n","current_date = start_time.date()\n","\n","while current_date <= end_time.date() :\n","  i = 0\n","  for i in range (0,24) :\n","    current_data_str = current_date.strftime(\"%Y-%m-%d\") \n","    all_time.append(\"%s\"%str(current_data_str)+\" %i:00:00\"%(i))\n","    i = i+1 \n","  current_date = current_date + timedelta(days=1)\n","  \n","all_time = pd.DataFrame(all_time)\n","all_time.columns = [\"Time\"]\n","all_time['Time'] = pd.to_datetime(all_time['Time'])\n","# print('all_time data')\n","# print(all_time)\n","index = 0\n","\n","for station in station_rank:\n","  print('model building for ', station, ' start')\n","  picked_station_data = produce_picked_station_data(start_st_model, station)\n","  picked_station_data = feature_engineering(picked_station_data, all_time)\n","  # print('check data')\n","  # print(picked_station_data)\n","  picked_station_data = scaling(picked_station_data, 'from_cnt')\n","  \n","  x_train, y_train = build_training_data(picked_station_data, used_days=7)\n","  x_train, y_train = shuffle(x_train,y_train)\n","  x_train, y_train, x_val, y_val = build_training_and_validation_data(x_train, y_train, 0.2)\n","  model = buildManyToOneModel(x_train.shape)\n","  callback = EarlyStopping(monitor=\"loss\", patience=10, verbose=1, mode=\"auto\")\n","  history = model.fit(x_train, y_train, epochs=20, batch_size=100, validation_data=(x_val, y_val), callbacks=[callback])\n","  #Áï´loss\n","  plt.title(\"Train_Loss\")\n","  plt.ylabel(\"Loss\")\n","  plt.xlabel('Epoch')\n","  plt.plot(history.history[\"loss\"])\n","  plt.plot(history.history[\"val_loss\"])\n","  #ÂÑ≤Â≠òÊ®°Âûã\n","  path = \"/content/drive/MyDrive/Â∞àÈ°åÁ†îÁ©∂üí™/sharingbike/2Â±§LSTM/FromModel_station\" + str(index)\n","  path += '.h5'\n","  model.save(path)\n","  index += 1\n","  print('model building for ', station, ' done')\n","  \n"]}],"metadata":{"colab":{"name":"5/17Âá∫Á´ômodel (LSTM 2Layers)","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}